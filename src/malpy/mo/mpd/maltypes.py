# SPDX-FileCopyrightText: 2025 CNES
#
# SPDX-License-Identifier: MIT

#####################################################
# Generated by generators/generator.py              #
# This file is generated. Do NOT edit it by hand.   #
#####################################################

"""Mission Operations Mission Product Distribution"""

from enum import IntEnum
from malpy.mo import mal

name = "MPD"
number = 9
version = 1

class MALShortForm(IntEnum):
    PRODUCTTYPE = 101
    PRODUCT = 102
    STANDINGORDER = 201
    PRODUCTSUMMARY = 103
    PRODUCTFILTER = 104
    TIMEWINDOW = 1
    PARAMETERDEF = 2
    VALUERANGE = 3
    VALUESET = 4
    STRINGPATTERN = 5
    DELIVERYMETHODENUM = 202
    SECONDARYERRORCODEENUM = 6


class DeliveryMethodEnumEnum(IntEnum):
    """The current delivery methods are defined for mission products:"""

    SERVICE = 1  # The mission product is to be delivered via service messages.  This requires the service consumer to initiate a service operation to subscribe to the products via the existing standing order.
    FILETRANSFER = 2  # The mission product is to be delivered by file transfer to the address contained in the deliverTo field.


class DeliveryMethodEnum(mal.AbstractEnum):
    """The current delivery methods are defined for mission products:"""

    shortForm = MALShortForm.DELIVERYMETHODENUM
    value_type = DeliveryMethodEnumEnum


class DeliveryMethodEnumList(mal.ElementList):
    shortForm = -MALShortForm.DELIVERYMETHODENUM

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(DeliveryMethodEnum(v))


class SecondaryErrorCodeEnumEnum(IntEnum):
    """For the Invalid error, the extraInfo field contains a secondary error code defined as a UInteger that allows for deployment specific extensibility.  The following standard secondary error codes are defined:"""

    UNKNOWN = 0  # Referenced MO object is not available to the service provider.
    UNDEFINED = 1  # Undefined value for enumeration field.
    OUT_OF_RANGE = 2  # A numeric value is outside the supported range.
    UNRECOGNIZED = 3  # Value of type MAL::Identifier or MAL::String (referencing a named item) does not correspond to a known item.
    BAD_TIME = 4  # A date-time value is outside the supported time period.
    INCONSISTENT = 5  # A value is inconsistent with that of another field within the message.  This indicates violation of a constraint rule.


class SecondaryErrorCodeEnum(mal.AbstractEnum):
    """For the Invalid error, the extraInfo field contains a secondary error code defined as a UInteger that allows for deployment specific extensibility.  The following standard secondary error codes are defined:"""

    shortForm = MALShortForm.SECONDARYERRORCODEENUM
    value_type = SecondaryErrorCodeEnumEnum


class SecondaryErrorCodeEnumList(mal.ElementList):
    shortForm = -MALShortForm.SECONDARYERRORCODEENUM

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(SecondaryErrorCodeEnum(v))


class ProductType(mal.Object):
    """A ProductType is an MO object that contains the static definition associated with multiple occurrences of a mission data product.  Its identity includes a constant key and an evolving version that is updated each time the definition is revised.  The ProductType defines the metadata parameters associated with the product and implies (but does not specify) the structure of the product body. Note that the domain of the ProductType and associated Products may not be the same.  Typically the domain of generic ProductTypes (for example an orbit file) may be defined at agency level, while the generated Products may be associated with a mission specific domain. Note that the ProductTypes are not contained within the service messages of any operation defined in this specification, but are referenced by Products and other service data structures.  A future service may support the distribution and access to mission product configuration data, including ProductTypes."""

    shortForm = MALShortForm.PRODUCTTYPE
    _fieldNumber = mal.Object._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.description = value[mal.Object._fieldNumber + 0]
            self.parameterDefs = value[mal.Object._fieldNumber + 1]

    @property
    def description(self):
        return self._internal_value[mal.Object._fieldNumber + 0]

    @description.setter
    def description(self, description):
        self._internal_value[mal.Object._fieldNumber + 0] = mal.String(description, canBeNull=False, attribName='description')
        self._isNull = False

    @property
    def parameterDefs(self):
        return self._internal_value[mal.Object._fieldNumber + 1]

    @parameterDefs.setter
    def parameterDefs(self, parameterDefs):
        self._internal_value[mal.Object._fieldNumber + 1] = ParameterDefList(parameterDefs, canBeNull=True, attribName='parameterDefs')
        self._isNull = False


class ProductTypeList(mal.ElementList):
    shortForm = -MALShortForm.PRODUCTTYPE

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(ProductType(v))


class Product(mal.Object):
    """A Product is an MO object that corresponds to a specific occurrence of a generated mission data product.  It comprises both metadata about the product and the product body itself, whose structure is opaque to the MPD services but known to both the product generator and consumer, given the referenced ProductType."""

    shortForm = MALShortForm.PRODUCT
    _fieldNumber = mal.Object._fieldNumber + 7

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*7
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.productType = value[mal.Object._fieldNumber + 0]
            self.creationDate = value[mal.Object._fieldNumber + 1]
            self.source = value[mal.Object._fieldNumber + 2]
            self.timeWindow = value[mal.Object._fieldNumber + 3]
            self.parameters = value[mal.Object._fieldNumber + 4]
            self.description = value[mal.Object._fieldNumber + 5]
            self.productBody = value[mal.Object._fieldNumber + 6]

    @property
    def productType(self):
        return self._internal_value[mal.Object._fieldNumber + 0]

    @productType.setter
    def productType(self, productType):
        self._internal_value[mal.Object._fieldNumber + 0] = ObjectRef(ProductType)(productType, canBeNull=False, attribName='productType')
        self._isNull = False

    @property
    def creationDate(self):
        return self._internal_value[mal.Object._fieldNumber + 1]

    @creationDate.setter
    def creationDate(self, creationDate):
        self._internal_value[mal.Object._fieldNumber + 1] = mal.Time(creationDate, canBeNull=False, attribName='creationDate')
        self._isNull = False

    @property
    def source(self):
        return self._internal_value[mal.Object._fieldNumber + 2]

    @source.setter
    def source(self, source):
        self._internal_value[mal.Object._fieldNumber + 2] = mal.ObjectRef(source, canBeNull=True, attribName='source')
        self._isNull = False

    @property
    def timeWindow(self):
        return self._internal_value[mal.Object._fieldNumber + 3]

    @timeWindow.setter
    def timeWindow(self, timeWindow):
        self._internal_value[mal.Object._fieldNumber + 3] = TimeWindow(timeWindow, canBeNull=False, attribName='timeWindow')
        self._isNull = False

    @property
    def parameters(self):
        return self._internal_value[mal.Object._fieldNumber + 4]

    @parameters.setter
    def parameters(self, parameters):
        self._internal_value[mal.Object._fieldNumber + 4] = mal.NamedValueList(parameters, canBeNull=True, attribName='parameters')
        self._isNull = False

    @property
    def description(self):
        return self._internal_value[mal.Object._fieldNumber + 5]

    @description.setter
    def description(self, description):
        self._internal_value[mal.Object._fieldNumber + 5] = mal.String(description, canBeNull=False, attribName='description')
        self._isNull = False

    @property
    def productBody(self):
        return self._internal_value[mal.Object._fieldNumber + 6]

    @productBody.setter
    def productBody(self, productBody):
        self._internal_value[mal.Object._fieldNumber + 6] = mal.Blob(productBody, canBeNull=False, attribName='productBody')
        self._isNull = False


class ProductList(mal.ElementList):
    shortForm = -MALShortForm.PRODUCT

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Product(v))


class StandingOrder(mal.Composite):
    """A StandingOrder is a data structure that holds the details of a standing order.  This includes a reference to the user who owns the product order, the product filter, how the products are to be delivered to the user and the current status of the order."""

    shortForm = MALShortForm.STANDINGORDER
    _fieldNumber = mal.Composite._fieldNumber + 6

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*6
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.user = value[mal.Composite._fieldNumber + 0]
            self.productFilter = value[mal.Composite._fieldNumber + 1]
            self.validityPeriod = value[mal.Composite._fieldNumber + 2]
            self.deliveryMethod = value[mal.Composite._fieldNumber + 3]
            self.deliverTo = value[mal.Composite._fieldNumber + 4]
            self.comments = value[mal.Composite._fieldNumber + 5]

    @property
    def user(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @user.setter
    def user(self, user):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Identifier(user, canBeNull=False, attribName='user')
        self._isNull = False

    @property
    def productFilter(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @productFilter.setter
    def productFilter(self, productFilter):
        self._internal_value[mal.Composite._fieldNumber + 1] = ProductFilter(productFilter, canBeNull=True, attribName='productFilter')
        self._isNull = False

    @property
    def validityPeriod(self):
        return self._internal_value[mal.Composite._fieldNumber + 2]

    @validityPeriod.setter
    def validityPeriod(self, validityPeriod):
        self._internal_value[mal.Composite._fieldNumber + 2] = TimeWindow(validityPeriod, canBeNull=True, attribName='validityPeriod')
        self._isNull = False

    @property
    def deliveryMethod(self):
        return self._internal_value[mal.Composite._fieldNumber + 3]

    @deliveryMethod.setter
    def deliveryMethod(self, deliveryMethod):
        self._internal_value[mal.Composite._fieldNumber + 3] = DeliveryMethodEnum(deliveryMethod, canBeNull=False, attribName='deliveryMethod')
        self._isNull = False

    @property
    def deliverTo(self):
        return self._internal_value[mal.Composite._fieldNumber + 4]

    @deliverTo.setter
    def deliverTo(self, deliverTo):
        self._internal_value[mal.Composite._fieldNumber + 4] = mal.URI(deliverTo, canBeNull=True, attribName='deliverTo')
        self._isNull = False

    @property
    def comments(self):
        return self._internal_value[mal.Composite._fieldNumber + 5]

    @comments.setter
    def comments(self, comments):
        self._internal_value[mal.Composite._fieldNumber + 5] = mal.String(comments, canBeNull=False, attribName='comments')
        self._isNull = False


class StandingOrderList(mal.ElementList):
    shortForm = -MALShortForm.STANDINGORDER

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(StandingOrder(v))


class ProductSummary(mal.Composite):
    """The ProductSummary comprises the product metadata without the product body and is used when returning a list of available products for retrieval. A ProductSummary relates to a specific Product instance."""

    shortForm = MALShortForm.PRODUCTSUMMARY
    _fieldNumber = mal.Composite._fieldNumber + 7

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*7
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.productType = value[mal.Composite._fieldNumber + 0]
            self.product = value[mal.Composite._fieldNumber + 1]
            self.creationDate = value[mal.Composite._fieldNumber + 2]
            self.source = value[mal.Composite._fieldNumber + 3]
            self.timeWindow = value[mal.Composite._fieldNumber + 4]
            self.parameters = value[mal.Composite._fieldNumber + 5]
            self.description = value[mal.Composite._fieldNumber + 6]

    @property
    def productType(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @productType.setter
    def productType(self, productType):
        self._internal_value[mal.Composite._fieldNumber + 0] = ObjectRef(ProductType)(productType, canBeNull=False, attribName='productType')
        self._isNull = False

    @property
    def product(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @product.setter
    def product(self, product):
        self._internal_value[mal.Composite._fieldNumber + 1] = ObjectRef(Product)(product, canBeNull=False, attribName='product')
        self._isNull = False

    @property
    def creationDate(self):
        return self._internal_value[mal.Composite._fieldNumber + 2]

    @creationDate.setter
    def creationDate(self, creationDate):
        self._internal_value[mal.Composite._fieldNumber + 2] = mal.Time(creationDate, canBeNull=False, attribName='creationDate')
        self._isNull = False

    @property
    def source(self):
        return self._internal_value[mal.Composite._fieldNumber + 3]

    @source.setter
    def source(self, source):
        self._internal_value[mal.Composite._fieldNumber + 3] = mal.ObjectRef(source, canBeNull=True, attribName='source')
        self._isNull = False

    @property
    def timeWindow(self):
        return self._internal_value[mal.Composite._fieldNumber + 4]

    @timeWindow.setter
    def timeWindow(self, timeWindow):
        self._internal_value[mal.Composite._fieldNumber + 4] = TimeWindow(timeWindow, canBeNull=False, attribName='timeWindow')
        self._isNull = False

    @property
    def parameters(self):
        return self._internal_value[mal.Composite._fieldNumber + 5]

    @parameters.setter
    def parameters(self, parameters):
        self._internal_value[mal.Composite._fieldNumber + 5] = mal.NamedValueList(parameters, canBeNull=True, attribName='parameters')
        self._isNull = False

    @property
    def description(self):
        return self._internal_value[mal.Composite._fieldNumber + 6]

    @description.setter
    def description(self, description):
        self._internal_value[mal.Composite._fieldNumber + 6] = mal.String(description, canBeNull=False, attribName='description')
        self._isNull = False


class ProductSummaryList(mal.ElementList):
    shortForm = -MALShortForm.PRODUCTSUMMARY

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(ProductSummary(v))


class ProductFilter(mal.Composite):
    """The ProductFilter is used in the context of standing orders and service operations requesting a filtered list of available products.  It specifies a filter in terms of productType, domain, sources and metadata parameter values.  To pass the filter, the product must satisfy all criteria specified:  the productType, one of any listed source objects and all specified metadata parameter filters.  If no filter is specified for source or parameterFilters then all products of the specified type pass the filter. A ProductFilter relates to a specific ProductType.  Note that the domain filter relates to the domain of the product and not of the product type.  The domain of a generic product type (for example an orbit file) may be defined at agency level to avoid the need to define new types for each mission, but the generated product will be associated with a specific mission domain. Note that in the case of requesting a list of available products, filtering by a range of product creation or time window dates may also be required.  These are specified as additional fields of the corresponding service message structure."""

    shortForm = MALShortForm.PRODUCTFILTER
    _fieldNumber = mal.Composite._fieldNumber + 4

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*4
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.productType = value[mal.Composite._fieldNumber + 0]
            self.domain = value[mal.Composite._fieldNumber + 1]
            self.sources = value[mal.Composite._fieldNumber + 2]
            self.parameterFilter = value[mal.Composite._fieldNumber + 3]

    @property
    def productType(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @productType.setter
    def productType(self, productType):
        self._internal_value[mal.Composite._fieldNumber + 0] = ObjectRef(ProductType)(productType, canBeNull=True, attribName='productType')
        self._isNull = False

    @property
    def domain(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @domain.setter
    def domain(self, domain):
        self._internal_value[mal.Composite._fieldNumber + 1] = mal.IdentifierList(domain, canBeNull=True, attribName='domain')
        self._isNull = False

    @property
    def sources(self):
        return self._internal_value[mal.Composite._fieldNumber + 2]

    @sources.setter
    def sources(self, sources):
        self._internal_value[mal.Composite._fieldNumber + 2] = mal.ObjectRefList(sources, canBeNull=True, attribName='sources')
        self._isNull = False

    @property
    def parameterFilter(self):
        return self._internal_value[mal.Composite._fieldNumber + 3]

    @parameterFilter.setter
    def parameterFilter(self, parameterFilter):
        self._internal_value[mal.Composite._fieldNumber + 3] = ParameterFilterList(parameterFilter, canBeNull=True, attribName='parameterFilter')
        self._isNull = False


class ProductFilterList(mal.ElementList):
    shortForm = -MALShortForm.PRODUCTFILTER

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(ProductFilter(v))


class TimeWindow(mal.Composite):
    """Represents a specific period of time, specified as two fields of type Time defining the start and end of the TimeWindow."""

    shortForm = MALShortForm.TIMEWINDOW
    _fieldNumber = mal.Composite._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.start = value[mal.Composite._fieldNumber + 0]
            self.end = value[mal.Composite._fieldNumber + 1]

    @property
    def start(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @start.setter
    def start(self, start):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Time(start, canBeNull=False, attribName='start')
        self._isNull = False

    @property
    def end(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @end.setter
    def end(self, end):
        self._internal_value[mal.Composite._fieldNumber + 1] = mal.Time(end, canBeNull=False, attribName='end')
        self._isNull = False


class TimeWindowList(mal.ElementList):
    shortForm = -MALShortForm.TIMEWINDOW

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(TimeWindow(v))


class ParameterDef(mal.Composite):
    """A ParameterDef specifies a metadata parameter in terms of its name, attribute type and optionally units and a free text description. Note that as ParameterDef is only used in the context of ProductType, which is not contained in the service messages of any operation defined in this specification, it also is not contained in any currently defined service message.  A future service may support the distribution and access to mission product configuration data, including ProductTypes and their contained ParameterDefs."""

    shortForm = MALShortForm.PARAMETERDEF
    _fieldNumber = mal.Composite._fieldNumber + 4

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*4
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.name = value[mal.Composite._fieldNumber + 0]
            self.parameterType = value[mal.Composite._fieldNumber + 1]
            self.units = value[mal.Composite._fieldNumber + 2]
            self.description = value[mal.Composite._fieldNumber + 3]

    @property
    def name(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @name.setter
    def name(self, name):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Identifier(name, canBeNull=False, attribName='name')
        self._isNull = False

    @property
    def parameterType(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @parameterType.setter
    def parameterType(self, parameterType):
        self._internal_value[mal.Composite._fieldNumber + 1] = mal.AttributeType(parameterType, canBeNull=False, attribName='parameterType')
        self._isNull = False

    @property
    def units(self):
        return self._internal_value[mal.Composite._fieldNumber + 2]

    @units.setter
    def units(self, units):
        self._internal_value[mal.Composite._fieldNumber + 2] = mal.String(units, canBeNull=True, attribName='units')
        self._isNull = False

    @property
    def description(self):
        return self._internal_value[mal.Composite._fieldNumber + 3]

    @description.setter
    def description(self, description):
        self._internal_value[mal.Composite._fieldNumber + 3] = mal.String(description, canBeNull=True, attribName='description')
        self._isNull = False


class ParameterDefList(mal.ElementList):
    shortForm = -MALShortForm.PARAMETERDEF

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(ParameterDef(v))


class ParameterFilter(mal.Composite):
    """A ParameterFilter enables specification of a filter based on the value of a metadata parameter.  It is used in the context of selecting  a subset of mission data products.  It is an abstract data type, with concrete subtypes for specific types of filter."""

    shortForm = None
    _fieldNumber = mal.Composite._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.name = value[mal.Composite._fieldNumber + 0]
            self.include = value[mal.Composite._fieldNumber + 1]

    @property
    def name(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @name.setter
    def name(self, name):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Identifier(name, canBeNull=False, attribName='name')
        self._isNull = False

    @property
    def include(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @include.setter
    def include(self, include):
        self._internal_value[mal.Composite._fieldNumber + 1] = mal.Boolean(include, canBeNull=False, attribName='include')
        self._isNull = False


class ParameterFilterList(mal.ElementList):
    shortForm = None

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(ParameterFilter(v))


class ValueRange(ParameterFilter):
    """A ValueRange is a concrete subtype of ParameterFilter that allows the specification of an allowed (or disallowed) value range for a metadata parameter."""

    shortForm = MALShortForm.VALUERANGE
    _fieldNumber = ParameterFilter._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.minimum = value[ParameterFilter._fieldNumber + 0]
            self.maximum = value[ParameterFilter._fieldNumber + 1]

    @property
    def minimum(self):
        return self._internal_value[ParameterFilter._fieldNumber + 0]

    @minimum.setter
    def minimum(self, minimum):
        if minimum is None:
            self._internal_value[ParameterFilter._fieldNumber + 0] = mal.Attribute(minimum, canBeNull=True, attribName='minimum')
        else:
            self._internal_value[ParameterFilter._fieldNumber + 0] = type(minimum)(minimum, canBeNull=True, attribName='minimum')
        self._isNull = False

    @property
    def maximum(self):
        return self._internal_value[ParameterFilter._fieldNumber + 1]

    @maximum.setter
    def maximum(self, maximum):
        if maximum is None:
            self._internal_value[ParameterFilter._fieldNumber + 1] = mal.Attribute(maximum, canBeNull=True, attribName='maximum')
        else:
            self._internal_value[ParameterFilter._fieldNumber + 1] = type(maximum)(maximum, canBeNull=True, attribName='maximum')
        self._isNull = False


class ValueRangeList(mal.ElementList):
    shortForm = -MALShortForm.VALUERANGE

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(ValueRange(v))


class ValueSet(ParameterFilter):
    """A ValueSet is a concrete subtype of ParameterFilter that allows the specification of a set of allowed (or disallowed) values for a metadata parameter."""

    shortForm = MALShortForm.VALUESET
    _fieldNumber = ParameterFilter._fieldNumber + 1

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*1
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.values = value[ParameterFilter._fieldNumber + 0]

    @property
    def values(self):
        return self._internal_value[ParameterFilter._fieldNumber + 0]

    @values.setter
    def values(self, values):
        self._internal_value[ParameterFilter._fieldNumber + 0] = mal.AttributeList(values, canBeNull=False, attribName='values')
        self._isNull = False


class ValueSetList(mal.ElementList):
    shortForm = -MALShortForm.VALUESET

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(ValueSet(v))


class StringPattern(ParameterFilter):
    """A StringPattern is a concrete subtype of ParameterFilter that allows the specification of a regular expression (or match pattern) to be searched for in the value of a text type metadata parameter."""

    shortForm = MALShortForm.STRINGPATTERN
    _fieldNumber = ParameterFilter._fieldNumber + 1

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*1
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.regex = value[ParameterFilter._fieldNumber + 0]

    @property
    def regex(self):
        return self._internal_value[ParameterFilter._fieldNumber + 0]

    @regex.setter
    def regex(self, regex):
        self._internal_value[ParameterFilter._fieldNumber + 0] = mal.String(regex, canBeNull=False, attribName='regex')
        self._isNull = False


class StringPatternList(mal.ElementList):
    shortForm = -MALShortForm.STRINGPATTERN

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(StringPattern(v))


class Errors(IntEnum):
    """All MAL errors."""

    Invalid = 1  # A field in the message contains an invalid value.  If there are multiple errors, the first invalid field is reported.
    Delivery_Failed = 2  # An attempt to deliver a product file to the nominated address failed.
    Order_Failed = 3  # Creation of a new product order failed.
    Unknown = 4  # The referenced item (user or orderID) does not exist.
