#####################################################
# Generated by generators/generator.py              #
# This file is generated. Do NOT edit it by hand.   #
#####################################################

"""The statistic service allows the consumer to monitor and control the statistical evaluation (e.g., average) of parameters.
The statistic service allows the consumer to link the statistic function to a parameter to be evaluated. Figure 3-9 shows the nominal sequence of operations for the statistic service:
---- nominal sequence diag ----
Statistic service nominal sequence
For each statistics link the service allows a consumer to specify a sampling interval, a reporting interval, and a collection interval. 
The sampling interval defines the interval between samples of the linked parameter, the reporting interval defines the interval between reports of the current statistic evaluation value, and the collection interval defines the period of time which parameter values are collected for the statistic function.
A consumer can create several links to the same parameter with different intervals, for example for the function 'Mean', a consumer might define two links with different collection intervals, one for an hour (D0) and one for four hours (D1). The consumer might also specify the reporting interval of half an hour for the first link and two hours for the second link. This would mean that the service provider would produce reports as shown in Figure 3-10.
--- timeline chart ---
Example Statistic interval reporting
If a statistic is defined to reset on collection interval expiration the currently calculated value, and any input collection of values, for the parameter being sampled is reset every collection interval, so if an hourly collection interval is defined for the function 'Mean' then every hour the current mean average value is reset (this does not affect the value reported by the Parameter service itself or any other links for the same function and parameter), the set of values used to calculate that mean average is cleared, and a report is generated containing the final value of the function just before the reset.
If a statistic is defined not to reset every collection interval, then the statistic maintains a moving evaluation for the collection interval. For example, if a collection interval of an hour is defined with a reset Boolean of FALSE for the function 'Maximum' then the evaluation will hold the maximum value obtained in the last hour.
The consumer is also able to define the sampling interval of the parameter for a link. This is independent of both the collection interval and the reporting interval. It makes sense for the sampling interval to be smaller than both the collection and reporting interval however it is perfectly possible to specify other values, as this is a deployment decision.
For the statistic service, the list of possible statistics functions is deployment-dependent, as any function would have to be implemented in the service provider. There are no operations for the creation, modification, or deletion of the statistic functions. The statistic service defines the evaluation of minimum, maximum, mean, and standard deviation functions, however the service supports the addition of other statistical functions by implementations.
NOTE: To ensure deterministic behaviour, implementations should endeavour to respect Nyquistï¿½s theorem."""

from enum import IntEnum
from malpy.mo import mal
from malpy.mo import mc

number = 5

# CapabilitySet 1
class GetStatisticsProviderHandler(mal.RequestProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 1


class GetStatisticsConsumerHandler(mal.RequestConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 1


class ResetEvaluationProviderHandler(mal.RequestProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 2


class ResetEvaluationConsumerHandler(mal.RequestConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 2



# CapabilitySet 2
class MonitorStatisticsProviderHandler(mal.PubSubProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 3


class MonitorStatisticsConsumerHandler(mal.PubSubConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 3



# CapabilitySet 3
class EnableServiceProviderHandler(mal.SubmitProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 4


class EnableServiceConsumerHandler(mal.SubmitConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 4


class GetServiceStatusProviderHandler(mal.RequestProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 5


class GetServiceStatusConsumerHandler(mal.RequestConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 5



# CapabilitySet 4
class EnableReportingProviderHandler(mal.SubmitProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 6


class EnableReportingConsumerHandler(mal.SubmitConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 6



# CapabilitySet 5
class ListParameterEvaluationsProviderHandler(mal.RequestProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 7


class ListParameterEvaluationsConsumerHandler(mal.RequestConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 7



# CapabilitySet 6
class AddParameterEvaluationProviderHandler(mal.RequestProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 8


class AddParameterEvaluationConsumerHandler(mal.RequestConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 8


class UpdateParameterEvaluationProviderHandler(mal.RequestProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 9


class UpdateParameterEvaluationConsumerHandler(mal.RequestConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 9


class RemoveParameterEvaluationProviderHandler(mal.SubmitProviderHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 10


class RemoveParameterEvaluationConsumerHandler(mal.SubmitConsumerHandler):
    AREA = 4
    VERSION = 1
    SERVICE = 5
    OPERATION = 10


class MALShortForm(IntEnum):
    STATISTICFUNCTIONDETAILS = 1
    STATISTICLINKDETAILS = 2
    STATISTICVALUE = 3
    STATISTICCREATIONREQUEST = 4
    STATISTICLINKSUMMARY = 5
    STATISTICEVALUATIONREPORT = 6


class StatisticFunctionDetails(mal.Composite):
    """The StatisticFunctionDetails structure holds the details of the function."""

    shortForm = MALShortForm.STATISTICFUNCTIONDETAILS
    _fieldNumber = mal.Composite._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.name = value[mal.Composite._fieldNumber + 0]
            self.description = value[mal.Composite._fieldNumber + 1]

    @property
    def name(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @name.setter
    def name(self, name):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Identifier(name, canBeNull=False, attribName='name')
        self._isNull = False

    @property
    def description(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @description.setter
    def description(self, description):
        self._internal_value[mal.Composite._fieldNumber + 1] = mal.String(description, canBeNull=False, attribName='description')
        self._isNull = False


class StatisticFunctionDetailsList(mal.ElementList):
    shortForm = -MALShortForm.STATISTICFUNCTIONDETAILS
    _fieldTypes = mal.MALType(StatisticFunctionDetails)
    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(StatisticFunctionDetails(v))


class StatisticLinkDetails(mal.Composite):
    """The StatisticLinkDetails structure holds the sampling, reporting, and collection intervals for one parameter statistic function link."""

    shortForm = MALShortForm.STATISTICLINKDETAILS
    _fieldNumber = mal.Composite._fieldNumber + 6

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*6
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.samplingInterval = value[mal.Composite._fieldNumber + 0]
            self.reportingInterval = value[mal.Composite._fieldNumber + 1]
            self.collectionInterval = value[mal.Composite._fieldNumber + 2]
            self.resetEveryCollection = value[mal.Composite._fieldNumber + 3]
            self.reportingEnabled = value[mal.Composite._fieldNumber + 4]
            self.useConverted = value[mal.Composite._fieldNumber + 5]

    @property
    def samplingInterval(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @samplingInterval.setter
    def samplingInterval(self, samplingInterval):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Duration(samplingInterval, canBeNull=False, attribName='samplingInterval')
        self._isNull = False

    @property
    def reportingInterval(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @reportingInterval.setter
    def reportingInterval(self, reportingInterval):
        self._internal_value[mal.Composite._fieldNumber + 1] = mal.Duration(reportingInterval, canBeNull=False, attribName='reportingInterval')
        self._isNull = False

    @property
    def collectionInterval(self):
        return self._internal_value[mal.Composite._fieldNumber + 2]

    @collectionInterval.setter
    def collectionInterval(self, collectionInterval):
        self._internal_value[mal.Composite._fieldNumber + 2] = mal.Duration(collectionInterval, canBeNull=False, attribName='collectionInterval')
        self._isNull = False

    @property
    def resetEveryCollection(self):
        return self._internal_value[mal.Composite._fieldNumber + 3]

    @resetEveryCollection.setter
    def resetEveryCollection(self, resetEveryCollection):
        self._internal_value[mal.Composite._fieldNumber + 3] = mal.Boolean(resetEveryCollection, canBeNull=False, attribName='resetEveryCollection')
        self._isNull = False

    @property
    def reportingEnabled(self):
        return self._internal_value[mal.Composite._fieldNumber + 4]

    @reportingEnabled.setter
    def reportingEnabled(self, reportingEnabled):
        self._internal_value[mal.Composite._fieldNumber + 4] = mal.Boolean(reportingEnabled, canBeNull=False, attribName='reportingEnabled')
        self._isNull = False

    @property
    def useConverted(self):
        return self._internal_value[mal.Composite._fieldNumber + 5]

    @useConverted.setter
    def useConverted(self, useConverted):
        self._internal_value[mal.Composite._fieldNumber + 5] = mal.Boolean(useConverted, canBeNull=False, attribName='useConverted')
        self._isNull = False


class StatisticLinkDetailsList(mal.ElementList):
    shortForm = -MALShortForm.STATISTICLINKDETAILS
    _fieldTypes = mal.MALType(StatisticLinkDetails)
    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(StatisticLinkDetails(v))


class StatisticValue(mal.Composite):
    """The StatisticValue structure holds the statistical result for a parameter."""

    shortForm = MALShortForm.STATISTICVALUE
    _fieldNumber = mal.Composite._fieldNumber + 6

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*6
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.paramDefInstId = value[mal.Composite._fieldNumber + 0]
            self.startTime = value[mal.Composite._fieldNumber + 1]
            self.endTime = value[mal.Composite._fieldNumber + 2]
            self.valueTime = value[mal.Composite._fieldNumber + 3]
            self.value = value[mal.Composite._fieldNumber + 4]
            self.sampleCount = value[mal.Composite._fieldNumber + 5]

    @property
    def paramDefInstId(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @paramDefInstId.setter
    def paramDefInstId(self, paramDefInstId):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Long(paramDefInstId, canBeNull=False, attribName='paramDefInstId')
        self._isNull = False

    @property
    def startTime(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @startTime.setter
    def startTime(self, startTime):
        self._internal_value[mal.Composite._fieldNumber + 1] = mal.Time(startTime, canBeNull=True, attribName='startTime')
        self._isNull = False

    @property
    def endTime(self):
        return self._internal_value[mal.Composite._fieldNumber + 2]

    @endTime.setter
    def endTime(self, endTime):
        self._internal_value[mal.Composite._fieldNumber + 2] = mal.Time(endTime, canBeNull=True, attribName='endTime')
        self._isNull = False

    @property
    def valueTime(self):
        return self._internal_value[mal.Composite._fieldNumber + 3]

    @valueTime.setter
    def valueTime(self, valueTime):
        self._internal_value[mal.Composite._fieldNumber + 3] = mal.Time(valueTime, canBeNull=True, attribName='valueTime')
        self._isNull = False

    @property
    def value(self):
        return self._internal_value[mal.Composite._fieldNumber + 4]

    @value.setter
    def value(self, value):
        if value is None:
            self._internal_value[mal.Composite._fieldNumber + 4] = mal.Attribute(value, canBeNull=True, attribName='value')
        else:
            self._internal_value[mal.Composite._fieldNumber + 4] = type(value)(value, canBeNull=True, attribName='value')
        self._isNull = False

    @property
    def sampleCount(self):
        return self._internal_value[mal.Composite._fieldNumber + 5]

    @sampleCount.setter
    def sampleCount(self, sampleCount):
        self._internal_value[mal.Composite._fieldNumber + 5] = mal.UInteger(sampleCount, canBeNull=False, attribName='sampleCount')
        self._isNull = False


class StatisticValueList(mal.ElementList):
    shortForm = -MALShortForm.STATISTICVALUE
    _fieldTypes = mal.MALType(StatisticValue)
    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(StatisticValue(v))


class StatisticCreationRequest(mal.Composite):
    """The StatisticCreationRequest structure holds the link details for a specific parameter and function association."""

    shortForm = MALShortForm.STATISTICCREATIONREQUEST
    _fieldNumber = mal.Composite._fieldNumber + 3

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*3
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.statFuncInstId = value[mal.Composite._fieldNumber + 0]
            self.parameterId = value[mal.Composite._fieldNumber + 1]
            self.linkDetails = value[mal.Composite._fieldNumber + 2]

    @property
    def statFuncInstId(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @statFuncInstId.setter
    def statFuncInstId(self, statFuncInstId):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Long(statFuncInstId, canBeNull=False, attribName='statFuncInstId')
        self._isNull = False

    @property
    def parameterId(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @parameterId.setter
    def parameterId(self, parameterId):
        self._internal_value[mal.Composite._fieldNumber + 1] = com.ObjectKey(parameterId, canBeNull=False, attribName='parameterId')
        self._isNull = False

    @property
    def linkDetails(self):
        return self._internal_value[mal.Composite._fieldNumber + 2]

    @linkDetails.setter
    def linkDetails(self, linkDetails):
        self._internal_value[mal.Composite._fieldNumber + 2] = StatisticLinkDetails(linkDetails, canBeNull=False, attribName='linkDetails')
        self._isNull = False


class StatisticCreationRequestList(mal.ElementList):
    shortForm = -MALShortForm.STATISTICCREATIONREQUEST
    _fieldTypes = mal.MALType(StatisticCreationRequest)
    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(StatisticCreationRequest(v))


class StatisticLinkSummary(mal.Composite):
    """The StatisticLinkSummary structure holds the ids of a specific statistic link and the function and parameter it links to."""

    shortForm = MALShortForm.STATISTICLINKSUMMARY
    _fieldNumber = mal.Composite._fieldNumber + 5

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*5
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.funcId = value[mal.Composite._fieldNumber + 0]
            self.linkId = value[mal.Composite._fieldNumber + 1]
            self.linkDefId = value[mal.Composite._fieldNumber + 2]
            self.reportingEnabled = value[mal.Composite._fieldNumber + 3]
            self.parameterId = value[mal.Composite._fieldNumber + 4]

    @property
    def funcId(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @funcId.setter
    def funcId(self, funcId):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Long(funcId, canBeNull=False, attribName='funcId')
        self._isNull = False

    @property
    def linkId(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @linkId.setter
    def linkId(self, linkId):
        self._internal_value[mal.Composite._fieldNumber + 1] = mal.Long(linkId, canBeNull=False, attribName='linkId')
        self._isNull = False

    @property
    def linkDefId(self):
        return self._internal_value[mal.Composite._fieldNumber + 2]

    @linkDefId.setter
    def linkDefId(self, linkDefId):
        self._internal_value[mal.Composite._fieldNumber + 2] = mal.Long(linkDefId, canBeNull=False, attribName='linkDefId')
        self._isNull = False

    @property
    def reportingEnabled(self):
        return self._internal_value[mal.Composite._fieldNumber + 3]

    @reportingEnabled.setter
    def reportingEnabled(self, reportingEnabled):
        self._internal_value[mal.Composite._fieldNumber + 3] = mal.Boolean(reportingEnabled, canBeNull=False, attribName='reportingEnabled')
        self._isNull = False

    @property
    def parameterId(self):
        return self._internal_value[mal.Composite._fieldNumber + 4]

    @parameterId.setter
    def parameterId(self, parameterId):
        self._internal_value[mal.Composite._fieldNumber + 4] = com.ObjectKey(parameterId, canBeNull=False, attribName='parameterId')
        self._isNull = False


class StatisticLinkSummaryList(mal.ElementList):
    shortForm = -MALShortForm.STATISTICLINKSUMMARY
    _fieldTypes = mal.MALType(StatisticLinkSummary)
    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(StatisticLinkSummary(v))


class StatisticEvaluationReport(mal.Composite):
    """The StatisticEvaluationReport structure holds the set of statistical results."""

    shortForm = MALShortForm.STATISTICEVALUATIONREPORT
    _fieldNumber = mal.Composite._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.linkId = value[mal.Composite._fieldNumber + 0]
            self.value = value[mal.Composite._fieldNumber + 1]

    @property
    def linkId(self):
        return self._internal_value[mal.Composite._fieldNumber + 0]

    @linkId.setter
    def linkId(self, linkId):
        self._internal_value[mal.Composite._fieldNumber + 0] = mal.Long(linkId, canBeNull=False, attribName='linkId')
        self._isNull = False

    @property
    def value(self):
        return self._internal_value[mal.Composite._fieldNumber + 1]

    @value.setter
    def value(self, value):
        self._internal_value[mal.Composite._fieldNumber + 1] = StatisticValue(value, canBeNull=False, attribName='value')
        self._isNull = False


class StatisticEvaluationReportList(mal.ElementList):
    shortForm = -MALShortForm.STATISTICEVALUATIONREPORT
    _fieldTypes = mal.MALType(StatisticEvaluationReport)
    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(StatisticEvaluationReport(v))


StatisticFunctionDetails._fieldTypes = mal.Composite._fieldTypes + [
    mal.MALType(mal.Identifier, nullable=False),
    mal.MALType(mal.String, nullable=False)
]
StatisticLinkDetails._fieldTypes = mal.Composite._fieldTypes + [
    mal.MALType(mal.Duration, nullable=False),
    mal.MALType(mal.Duration, nullable=False),
    mal.MALType(mal.Duration, nullable=False),
    mal.MALType(mal.Boolean, nullable=False),
    mal.MALType(mal.Boolean, nullable=False),
    mal.MALType(mal.Boolean, nullable=False)
]
StatisticValue._fieldTypes = mal.Composite._fieldTypes + [
    mal.MALType(mal.Long, nullable=False),
    mal.MALType(mal.Time, nullable=True),
    mal.MALType(mal.Time, nullable=True),
    mal.MALType(mal.Time, nullable=True),
    mal.MALType(mal.Attribute, nullable=True),
    mal.MALType(mal.UInteger, nullable=False)
]
StatisticCreationRequest._fieldTypes = mal.Composite._fieldTypes + [
    mal.MALType(mal.Long, nullable=False),
    mal.MALType(com.ObjectKey, nullable=False),
    mal.MALType(StatisticLinkDetails, nullable=False)
]
StatisticLinkSummary._fieldTypes = mal.Composite._fieldTypes + [
    mal.MALType(mal.Long, nullable=False),
    mal.MALType(mal.Long, nullable=False),
    mal.MALType(mal.Long, nullable=False),
    mal.MALType(mal.Boolean, nullable=False),
    mal.MALType(com.ObjectKey, nullable=False)
]
StatisticEvaluationReport._fieldTypes = mal.Composite._fieldTypes + [
    mal.MALType(mal.Long, nullable=False),
    mal.MALType(StatisticValue, nullable=False)
]
