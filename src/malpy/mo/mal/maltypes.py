#####################################################
# Generated by generators/generator.py              #
# This file is generated. Do NOT edit it by hand.   #
#####################################################

"""None"""

from enum import IntEnum
from abc import ABC

name = "MAL"
number = 1
version = 1

class MALShortForm(IntEnum):
    BLOB = 1
    BOOLEAN = 2
    DURATION = 3
    FLOAT = 4
    DOUBLE = 5
    IDENTIFIER = 6
    OCTET = 7
    UOCTET = 8
    SHORT = 9
    USHORT = 10
    INTEGER = 11
    UINTEGER = 12
    LONG = 13
    ULONG = 14
    STRING = 15
    TIME = 16
    FINETIME = 17
    URI = 18
    INTERACTIONTYPE = 19
    SESSIONTYPE = 20
    QOSLEVEL = 21
    UPDATETYPE = 22
    SUBSCRIPTION = 23
    ENTITYREQUEST = 24
    ENTITYKEY = 25
    UPDATEHEADER = 26
    IDBOOLEANPAIR = 27
    PAIR = 28
    NAMEDVALUE = 29
    FILE = 30


class Element(ABC):
    """Element is the base type of all data constructs. All types that make up the MAL data model are derived from it."""

    shortForm = None

    def __init__(self, value=None, canBeNull=True, attribName=None):
        self._isNull = False
        self._canBeNull = canBeNull
        self.attribName = attribName
        if value is None and not self._canBeNull:
            raise ValueError('This {} cannot be None.'.format(type(self).__name__))

    @property
    def internal_value(self):
        if self._isNull:
            return None
        else:
            return self._internal_value


class ElementList(Element):
    shortForm = None

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)

    @property
    def internal_value(self):
       return self._internal_value

    def copy(self):
        if self._isNull:
            value = None
        else:
            value = []
            for v in self.internal_value:
                value.append(v.copy())
        return self.__class__(value)


class Attribute(Element):
    """Attribute is the base type of all attributes of the MAL data model. Attributes are contained within Composites and are used to build complex structures that make the data model."""

    shortForm = None

    value_type = None

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            self._internal_value = value.copy().internal_value
        elif type(value) == type(self).value_type:
            self._internal_value = value
        elif type(self) == type(Attribute(None)) and value.shortForm in range(1,19):
            self._internal_value = value.copy().internal_value
            self.shortForm = value.shortForm
            self.value_type = value.value_type
        else:
            raise TypeError("Expected {}, got {}.".format(type(self).value_type, type(value)))

    def copy(self):
        return self.__class__(self.internal_value, self._canBeNull)


class AbstractEnum(Attribute):

    value_type = None

    def __init__(self, value=None, canBeNull=True, attribName=None):
        if type(value) == type(''):
            for v in list(self.value_type):
                 if v.name == value:
                     value = v
        elif type(value) == type(1):
            value = self.value_type(value)
        elif type(value) == type(self).value_type:
            pass  # Everything is fine
        elif type(value) == type(self):
            value = value.internal_value
        else:
            raise TypeError("Expected {}, got {}.".format(type(self).value_type, type(value)))
        super().__init__(value, canBeNull, attribName)


class Composite(Element):
    """Composite is the base structure for composite structures that contain a set of elements."""

    shortForm = None

    _fieldNumber = 0

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []

    def copy(self):
        if self._isNull:
            value = None
        else:
            value = []
            for v in self.internal_value:
                value.append(v.copy())
        return self.__class__(value, self._canBeNull)


class Blob(Attribute):
    """The Blob structure is used to store binary object attributes. It is a variable-length, unbounded, octet array. The distinction between this type and a list of Octet attributes is that this type may allow language mappings and encodings to use more efficient or appropriate representations."""

    shortForm = MALShortForm.BLOB
    value_type = bytes


class BlobList(ElementList):
    shortForm = -MALShortForm.BLOB

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Blob(v))


class Boolean(Attribute):
    """The Boolean structure is used to store Boolean attributes. Possible values are 'True' or 'False'."""

    shortForm = MALShortForm.BOOLEAN
    value_type = bool


class BooleanList(ElementList):
    shortForm = -MALShortForm.BOOLEAN

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Boolean(v))


class Duration(Attribute):
    """The Duration structure is used to store Duration attributes. It represents a length of time in seconds. It may contain a fractional component."""

    shortForm = MALShortForm.DURATION
    value_type = float


class DurationList(ElementList):
    shortForm = -MALShortForm.DURATION

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Duration(v))


class Float(Attribute):
    """The Float structure is used to store floating point attributes using the IEEE 754 32-bit range.
Three special values exist for this type: POSITIVE_INFINITY, NEGATIVE_INFINITY, and NaN (Not A Number)."""

    shortForm = MALShortForm.FLOAT
    value_type = float


class FloatList(ElementList):
    shortForm = -MALShortForm.FLOAT

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Float(v))


class Double(Attribute):
    """The Double structure is used to store floating point attributes using the IEEE 754 64-bit range.
Three special values exist for this type: POSITIVE_INFINITY, NEGATIVE_INFINITY, and NaN (Not A Number)."""

    shortForm = MALShortForm.DOUBLE
    value_type = float


class DoubleList(ElementList):
    shortForm = -MALShortForm.DOUBLE

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Double(v))


class Identifier(Attribute):
    """The Identifier structure is used to store an identifier and can be used for indexing. It is a variable-length, unbounded, Unicode string."""

    shortForm = MALShortForm.IDENTIFIER
    value_type = str


class IdentifierList(ElementList):
    shortForm = -MALShortForm.IDENTIFIER

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Identifier(v))


class Octet(Attribute):
    """The Octet structure is used to store 8-bit signed attributes. The permitted range is -128 to 127."""

    shortForm = MALShortForm.OCTET
    value_type = int

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if type(value) == int and ( value < -128 or value > 127 ):
            raise ValueError("Authorized value is between -128 and 127.")


class OctetList(ElementList):
    shortForm = -MALShortForm.OCTET

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Octet(v))


class UOctet(Attribute):
    """The UOctet structure is used to store 8-bit unsigned attributes. The permitted range is 0 to 255."""

    shortForm = MALShortForm.UOCTET
    value_type = int

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if type(value) == int and ( value < 0 or value > 255 ):
            raise ValueError("Authorized value is between 0 and 255.")


class UOctetList(ElementList):
    shortForm = -MALShortForm.UOCTET

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(UOctet(v))


class Short(Attribute):
    """The Short structure is used to store 16-bit signed attributes. The permitted range is -32768 to 32767."""

    shortForm = MALShortForm.SHORT
    value_type = int

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if type(value) == int and ( value < -32768 or value > 32767 ):
            raise ValueError("Authorized value is between -32768 and 32767.")


class ShortList(ElementList):
    shortForm = -MALShortForm.SHORT

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Short(v))


class UShort(Attribute):
    """The UShort structure is used to store 16-bit unsigned attributes. The permitted range is 0 to 65535."""

    shortForm = MALShortForm.USHORT
    value_type = int

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if type(value) == int and ( value < 0 or value > 65535 ):
            raise ValueError("Authorized value is between 0 and 65535.")


class UShortList(ElementList):
    shortForm = -MALShortForm.USHORT

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(UShort(v))


class Integer(Attribute):
    """The Integer structure is used to store 32-bit signed attributes. The permitted range is -2147483648 to 2147483647."""

    shortForm = MALShortForm.INTEGER
    value_type = int

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if type(value) == int and ( value < -2147483648 or value > 21474836487 ):
            raise ValueError("Authorized value is between -2147483648 and 21474836487.")


class IntegerList(ElementList):
    shortForm = -MALShortForm.INTEGER

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Integer(v))


class UInteger(Attribute):
    """The UInteger structure is used to store 32-bit unsigned attributes. The permitted range is 0 to 4294967295."""

    shortForm = MALShortForm.UINTEGER
    value_type = int

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if type(value) == int and ( value < 0 or value > 4294967295 ):
            raise ValueError("Authorized value is between 0 and 4294967295.")


class UIntegerList(ElementList):
    shortForm = -MALShortForm.UINTEGER

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(UInteger(v))


class Long(Attribute):
    """The Long structure is used to store 64-bit signed attributes. The permitted range is -9223372036854775808 to 9223372036854775807."""

    shortForm = MALShortForm.LONG
    value_type = int

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if type(value) == int and ( value < -9223372036854775808 or value > 9223372036854775807 ):
            raise ValueError("Authorized value is between -9223372036854775808 and 9223372036854775807.")


class LongList(ElementList):
    shortForm = -MALShortForm.LONG

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Long(v))


class ULong(Attribute):
    """The ULong structure is used to store 64-bit unsigned attributes. The permitted range is 0 to 18446744073709551615."""

    shortForm = MALShortForm.ULONG
    value_type = int

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if type(value) == int and ( value < 0 or value > 18446744073709551615 ):
            raise ValueError("Authorized value is between 0 and 18446744073709551615.")


class ULongList(ElementList):
    shortForm = -MALShortForm.ULONG

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(ULong(v))


class String(Attribute):
    """The String structure is used to store String attributes. It is a variable-length, unbounded, Unicode string."""

    shortForm = MALShortForm.STRING
    value_type = str


class StringList(ElementList):
    shortForm = -MALShortForm.STRING

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(String(v))


class Time(Attribute):
    """The Time structure is used to store absolute time attributes. It represents an absolute date and time to millisecond resolution."""

    shortForm = MALShortForm.TIME
    value_type = float


class TimeList(ElementList):
    shortForm = -MALShortForm.TIME

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Time(v))


class FineTime(Attribute):
    """The FineTime structure is used to store high-resolution absolute time attributes. It represents an absolute date and time to picosecond resolution."""

    shortForm = MALShortForm.FINETIME
    value_type = float


class FineTimeList(ElementList):
    shortForm = -MALShortForm.FINETIME

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(FineTime(v))


class URI(Attribute):
    """The URI structure is used to store URI addresses. It is a variable-length, unbounded, Unicode string."""

    shortForm = MALShortForm.URI
    value_type = str


class URIList(ElementList):
    shortForm = -MALShortForm.URI

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(URI(v))


class InteractionTypeEnum(IntEnum):
    """InteractionType is an enumeration holding the possible interaction pattern types."""

    SEND = 1  # Used for Send interactions.
    SUBMIT = 2  # Used for Submit interactions.
    REQUEST = 3  # Used for Request interactions.
    INVOKE = 4  # Used for Invoke interactions.
    PROGRESS = 5  # Used for Progress interactions.
    PUBSUB = 6  # Used for Publish/Subscribe interactions.


class InteractionType(AbstractEnum):
    """InteractionType is an enumeration holding the possible interaction pattern types."""

    shortForm = MALShortForm.INTERACTIONTYPE
    value_type = InteractionTypeEnum


class InteractionTypeList(ElementList):
    shortForm = -MALShortForm.INTERACTIONTYPE

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(InteractionType(v))


class SessionTypeEnum(IntEnum):
    """SessionType is an enumeration holding the session types."""

    LIVE = 1  # Used for Live sessions.
    SIMULATION = 2  # Used for Simulation sessions.
    REPLAY = 3  # Used for Replay sessions.


class SessionType(AbstractEnum):
    """SessionType is an enumeration holding the session types."""

    shortForm = MALShortForm.SESSIONTYPE
    value_type = SessionTypeEnum


class SessionTypeList(ElementList):
    shortForm = -MALShortForm.SESSIONTYPE

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(SessionType(v))


class QoSLevelEnum(IntEnum):
    """QoSLevel is an enumeration holding the possible QoS levels."""

    BESTEFFORT = 1  # Used for Best Effort QoS Level.
    ASSURED = 2  # Used for Assured QoS Level.
    QUEUED = 3  # Used for Queued QoS Level.
    TIMELY = 4  # Used for Timely QoS Level.


class QoSLevel(AbstractEnum):
    """QoSLevel is an enumeration holding the possible QoS levels."""

    shortForm = MALShortForm.QOSLEVEL
    value_type = QoSLevelEnum


class QoSLevelList(ElementList):
    shortForm = -MALShortForm.QOSLEVEL

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(QoSLevel(v))


class UpdateTypeEnum(IntEnum):
    """UpdateType is an enumeration holding the possible Update types."""

    CREATION = 1  # Update is notification of the creation of the item.
    UPDATE = 2  # Update is just a periodic update of the item and has not changed its value.
    MODIFICATION = 3  # Update is for a changed value or modification of the item.
    DELETION = 4  # Update is notification of the removal of the item.


class UpdateType(AbstractEnum):
    """UpdateType is an enumeration holding the possible Update types."""

    shortForm = MALShortForm.UPDATETYPE
    value_type = UpdateTypeEnum


class UpdateTypeList(ElementList):
    shortForm = -MALShortForm.UPDATETYPE

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(UpdateType(v))


class Subscription(Composite):
    """The Subscription structure is used when subscribing for updates using the PUBSUB interaction pattern. It contains a single identifier that identifies the subscription being defined and a set of entities being requested."""

    shortForm = MALShortForm.SUBSCRIPTION
    _fieldNumber = Composite._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.subscriptionId = value[Composite._fieldNumber + 0]
            self.entities = value[Composite._fieldNumber + 1]

    @property
    def subscriptionId(self):
        return self._internal_value[Composite._fieldNumber + 0]

    @subscriptionId.setter
    def subscriptionId(self, subscriptionId):
        self._internal_value[Composite._fieldNumber + 0] = Identifier(subscriptionId, canBeNull=False, attribName='subscriptionId')
        self._isNull = False

    @property
    def entities(self):
        return self._internal_value[Composite._fieldNumber + 1]

    @entities.setter
    def entities(self, entities):
        self._internal_value[Composite._fieldNumber + 1] = EntityRequestList(entities, canBeNull=False, attribName='entities')
        self._isNull = False


class SubscriptionList(ElementList):
    shortForm = -MALShortForm.SUBSCRIPTION

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Subscription(v))


class EntityRequest(Composite):
    """The EntityRequest structure is used when subscribing for updates using the PUBSUB interaction pattern."""

    shortForm = MALShortForm.ENTITYREQUEST
    _fieldNumber = Composite._fieldNumber + 6

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*6
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.subDomain = value[Composite._fieldNumber + 0]
            self.allAreas = value[Composite._fieldNumber + 1]
            self.allServices = value[Composite._fieldNumber + 2]
            self.allOperations = value[Composite._fieldNumber + 3]
            self.onlyOnChange = value[Composite._fieldNumber + 4]
            self.entityKeys = value[Composite._fieldNumber + 5]

    @property
    def subDomain(self):
        return self._internal_value[Composite._fieldNumber + 0]

    @subDomain.setter
    def subDomain(self, subDomain):
        self._internal_value[Composite._fieldNumber + 0] = IdentifierList(subDomain, canBeNull=True, attribName='subDomain')
        self._isNull = False

    @property
    def allAreas(self):
        return self._internal_value[Composite._fieldNumber + 1]

    @allAreas.setter
    def allAreas(self, allAreas):
        self._internal_value[Composite._fieldNumber + 1] = Boolean(allAreas, canBeNull=False, attribName='allAreas')
        self._isNull = False

    @property
    def allServices(self):
        return self._internal_value[Composite._fieldNumber + 2]

    @allServices.setter
    def allServices(self, allServices):
        self._internal_value[Composite._fieldNumber + 2] = Boolean(allServices, canBeNull=False, attribName='allServices')
        self._isNull = False

    @property
    def allOperations(self):
        return self._internal_value[Composite._fieldNumber + 3]

    @allOperations.setter
    def allOperations(self, allOperations):
        self._internal_value[Composite._fieldNumber + 3] = Boolean(allOperations, canBeNull=False, attribName='allOperations')
        self._isNull = False

    @property
    def onlyOnChange(self):
        return self._internal_value[Composite._fieldNumber + 4]

    @onlyOnChange.setter
    def onlyOnChange(self, onlyOnChange):
        self._internal_value[Composite._fieldNumber + 4] = Boolean(onlyOnChange, canBeNull=False, attribName='onlyOnChange')
        self._isNull = False

    @property
    def entityKeys(self):
        return self._internal_value[Composite._fieldNumber + 5]

    @entityKeys.setter
    def entityKeys(self, entityKeys):
        self._internal_value[Composite._fieldNumber + 5] = EntityKeyList(entityKeys, canBeNull=False, attribName='entityKeys')
        self._isNull = False


class EntityRequestList(ElementList):
    shortForm = -MALShortForm.ENTITYREQUEST

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(EntityRequest(v))


class EntityKey(Composite):
    """The EntityKey structure is used to identify an entity in the PUBSUB interaction pattern."""

    shortForm = MALShortForm.ENTITYKEY
    _fieldNumber = Composite._fieldNumber + 4

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*4
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.firstSubKey = value[Composite._fieldNumber + 0]
            self.secondSubKey = value[Composite._fieldNumber + 1]
            self.thirdSubKey = value[Composite._fieldNumber + 2]
            self.fourthSubKey = value[Composite._fieldNumber + 3]

    @property
    def firstSubKey(self):
        return self._internal_value[Composite._fieldNumber + 0]

    @firstSubKey.setter
    def firstSubKey(self, firstSubKey):
        self._internal_value[Composite._fieldNumber + 0] = Identifier(firstSubKey, canBeNull=True, attribName='firstSubKey')
        self._isNull = False

    @property
    def secondSubKey(self):
        return self._internal_value[Composite._fieldNumber + 1]

    @secondSubKey.setter
    def secondSubKey(self, secondSubKey):
        self._internal_value[Composite._fieldNumber + 1] = Long(secondSubKey, canBeNull=True, attribName='secondSubKey')
        self._isNull = False

    @property
    def thirdSubKey(self):
        return self._internal_value[Composite._fieldNumber + 2]

    @thirdSubKey.setter
    def thirdSubKey(self, thirdSubKey):
        self._internal_value[Composite._fieldNumber + 2] = Long(thirdSubKey, canBeNull=True, attribName='thirdSubKey')
        self._isNull = False

    @property
    def fourthSubKey(self):
        return self._internal_value[Composite._fieldNumber + 3]

    @fourthSubKey.setter
    def fourthSubKey(self, fourthSubKey):
        self._internal_value[Composite._fieldNumber + 3] = Long(fourthSubKey, canBeNull=True, attribName='fourthSubKey')
        self._isNull = False


class EntityKeyList(ElementList):
    shortForm = -MALShortForm.ENTITYKEY

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(EntityKey(v))


class UpdateHeader(Composite):
    """The UpdateHeader structure is used by updates using the PUBSUB interaction pattern. It holds information that identifies a single update."""

    shortForm = MALShortForm.UPDATEHEADER
    _fieldNumber = Composite._fieldNumber + 4

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*4
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.timestamp = value[Composite._fieldNumber + 0]
            self.sourceURI = value[Composite._fieldNumber + 1]
            self.updateType = value[Composite._fieldNumber + 2]
            self.key = value[Composite._fieldNumber + 3]

    @property
    def timestamp(self):
        return self._internal_value[Composite._fieldNumber + 0]

    @timestamp.setter
    def timestamp(self, timestamp):
        self._internal_value[Composite._fieldNumber + 0] = Time(timestamp, canBeNull=False, attribName='timestamp')
        self._isNull = False

    @property
    def sourceURI(self):
        return self._internal_value[Composite._fieldNumber + 1]

    @sourceURI.setter
    def sourceURI(self, sourceURI):
        self._internal_value[Composite._fieldNumber + 1] = URI(sourceURI, canBeNull=False, attribName='sourceURI')
        self._isNull = False

    @property
    def updateType(self):
        return self._internal_value[Composite._fieldNumber + 2]

    @updateType.setter
    def updateType(self, updateType):
        self._internal_value[Composite._fieldNumber + 2] = UpdateType(updateType, canBeNull=False, attribName='updateType')
        self._isNull = False

    @property
    def key(self):
        return self._internal_value[Composite._fieldNumber + 3]

    @key.setter
    def key(self, key):
        self._internal_value[Composite._fieldNumber + 3] = EntityKey(key, canBeNull=False, attribName='key')
        self._isNull = False


class UpdateHeaderList(ElementList):
    shortForm = -MALShortForm.UPDATEHEADER

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(UpdateHeader(v))


class IdBooleanPair(Composite):
    """IdBooleanPair is a simple pair type of an identifier and Boolean value."""

    shortForm = MALShortForm.IDBOOLEANPAIR
    _fieldNumber = Composite._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.id = value[Composite._fieldNumber + 0]
            self.value = value[Composite._fieldNumber + 1]

    @property
    def id(self):
        return self._internal_value[Composite._fieldNumber + 0]

    @id.setter
    def id(self, id):
        self._internal_value[Composite._fieldNumber + 0] = Identifier(id, canBeNull=True, attribName='id')
        self._isNull = False

    @property
    def value(self):
        return self._internal_value[Composite._fieldNumber + 1]

    @value.setter
    def value(self, value):
        self._internal_value[Composite._fieldNumber + 1] = Boolean(value, canBeNull=True, attribName='value')
        self._isNull = False


class IdBooleanPairList(ElementList):
    shortForm = -MALShortForm.IDBOOLEANPAIR

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(IdBooleanPair(v))


class Pair(Composite):
    """Pair is a simple composite structure for holding pairs. The pairs can be user-defined attributes."""

    shortForm = MALShortForm.PAIR
    _fieldNumber = Composite._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.first = value[Composite._fieldNumber + 0]
            self.second = value[Composite._fieldNumber + 1]

    @property
    def first(self):
        return self._internal_value[Composite._fieldNumber + 0]

    @first.setter
    def first(self, first):
        if first is None:
            self._internal_value[Composite._fieldNumber + 0] = Attribute(first, canBeNull=True, attribName='first')
        else:
            self._internal_value[Composite._fieldNumber + 0] = type(first)(first, canBeNull=True, attribName='first')
        self._isNull = False

    @property
    def second(self):
        return self._internal_value[Composite._fieldNumber + 1]

    @second.setter
    def second(self, second):
        if second is None:
            self._internal_value[Composite._fieldNumber + 1] = Attribute(second, canBeNull=True, attribName='second')
        else:
            self._internal_value[Composite._fieldNumber + 1] = type(second)(second, canBeNull=True, attribName='second')
        self._isNull = False


class PairList(ElementList):
    shortForm = -MALShortForm.PAIR

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(Pair(v))


class NamedValue(Composite):
    """The NamedValue structure represents a simple pair type of an identifier and abstract attribute value."""

    shortForm = MALShortForm.NAMEDVALUE
    _fieldNumber = Composite._fieldNumber + 2

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*2
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.name = value[Composite._fieldNumber + 0]
            self.value = value[Composite._fieldNumber + 1]

    @property
    def name(self):
        return self._internal_value[Composite._fieldNumber + 0]

    @name.setter
    def name(self, name):
        self._internal_value[Composite._fieldNumber + 0] = Identifier(name, canBeNull=True, attribName='name')
        self._isNull = False

    @property
    def value(self):
        return self._internal_value[Composite._fieldNumber + 1]

    @value.setter
    def value(self, value):
        if value is None:
            self._internal_value[Composite._fieldNumber + 1] = Attribute(value, canBeNull=True, attribName='value')
        else:
            self._internal_value[Composite._fieldNumber + 1] = type(value)(value, canBeNull=True, attribName='value')
        self._isNull = False


class NamedValueList(ElementList):
    shortForm = -MALShortForm.NAMEDVALUE

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(NamedValue(v))


class File(Composite):
    """The File structure represents a File and holds details about a File. It can also, optionally, hold a BLOB of the file data. The file type is denoted using the internet MIME media types, the list of official MIME types is held at http://www.iana.org/assignments/media-types/index.html."""

    shortForm = MALShortForm.FILE
    _fieldNumber = Composite._fieldNumber + 7

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value += [None]*7
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            self.name = value[Composite._fieldNumber + 0]
            self.mimeType = value[Composite._fieldNumber + 1]
            self.creationDate = value[Composite._fieldNumber + 2]
            self.modificationDate = value[Composite._fieldNumber + 3]
            self.size = value[Composite._fieldNumber + 4]
            self.content = value[Composite._fieldNumber + 5]
            self.metaData = value[Composite._fieldNumber + 6]

    @property
    def name(self):
        return self._internal_value[Composite._fieldNumber + 0]

    @name.setter
    def name(self, name):
        self._internal_value[Composite._fieldNumber + 0] = Identifier(name, canBeNull=False, attribName='name')
        self._isNull = False

    @property
    def mimeType(self):
        return self._internal_value[Composite._fieldNumber + 1]

    @mimeType.setter
    def mimeType(self, mimeType):
        self._internal_value[Composite._fieldNumber + 1] = String(mimeType, canBeNull=True, attribName='mimeType')
        self._isNull = False

    @property
    def creationDate(self):
        return self._internal_value[Composite._fieldNumber + 2]

    @creationDate.setter
    def creationDate(self, creationDate):
        self._internal_value[Composite._fieldNumber + 2] = Time(creationDate, canBeNull=True, attribName='creationDate')
        self._isNull = False

    @property
    def modificationDate(self):
        return self._internal_value[Composite._fieldNumber + 3]

    @modificationDate.setter
    def modificationDate(self, modificationDate):
        self._internal_value[Composite._fieldNumber + 3] = Time(modificationDate, canBeNull=True, attribName='modificationDate')
        self._isNull = False

    @property
    def size(self):
        return self._internal_value[Composite._fieldNumber + 4]

    @size.setter
    def size(self, size):
        self._internal_value[Composite._fieldNumber + 4] = ULong(size, canBeNull=True, attribName='size')
        self._isNull = False

    @property
    def content(self):
        return self._internal_value[Composite._fieldNumber + 5]

    @content.setter
    def content(self, content):
        self._internal_value[Composite._fieldNumber + 5] = Blob(content, canBeNull=True, attribName='content')
        self._isNull = False

    @property
    def metaData(self):
        return self._internal_value[Composite._fieldNumber + 6]

    @metaData.setter
    def metaData(self, metaData):
        self._internal_value[Composite._fieldNumber + 6] = NamedValueList(metaData, canBeNull=True, attribName='metaData')
        self._isNull = False


class FileList(ElementList):
    shortForm = -MALShortForm.FILE

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._internal_value = []
        if type(value) == type(self):
            if value.internal_value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._internal_value = value.copy().internal_value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._internal_value.append(File(v))


class Errors(IntEnum):
    """All MAL errors."""

    DELIVERY_FAILED = 65536  # Confirmed communication error.
    DELIVERY_TIMEDOUT = 65537  # Unconfirmed communication error.
    DELIVERY_DELAYED = 65538  # Message queued somewhere awaiting contact.
    DESTINATION_UNKNOWN = 65539  # Destination cannot be contacted.
    DESTINATION_TRANSIENT = 65540  # Destination middleware reports destination application does not exist.
    DESTINATION_LOST = 65541  # Destination lost halfway through conversation.
    AUTHENTICATION_FAIL = 65542  # A failure to authenticate the message correctly.
    AUTHORISATION_FAIL = 65543  # A failure in the MAL to authorise the message.
    ENCRYPTION_FAIL = 65544  # A failure in the MAL to encrypt/decrypt the message.
    UNSUPPORTED_AREA = 65545  # The destination does not support the service area.
    UNSUPPORTED_OPERATION = 65546  # The destination does not support the operation.
    UNSUPPORTED_VERSION = 65547  # The destination does not support the service version.
    BAD_ENCODING = 65548  # The destination was unable to decode the message.
    INTERNAL = 65549  # An internal error has occurred.
    UNKNOWN = 65550  # Operation specific.
    INCORRECT_STATE = 65551  # The destination was not in the correct state for the received message.
    TOO_MANY = 65552  # Maximum number of subscriptions or providers of a broker has been exceeded.
    SHUTDOWN = 65553  # The component is being shutdown.
