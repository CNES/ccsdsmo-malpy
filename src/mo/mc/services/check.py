#####################################################
# Generated by generators/generator.py              #
# This file is generated. Do NOT edit it by hand.   #
#####################################################

"""The check service allows the user to monitor and control the checking of parameters values against check definitions including limit sets. Violations of these defined checks are published using the COM event service.
The check service allows the consumer to define checks and then link the check definition to a parameter to be monitored. Figure 3-6 shows the nominal sequence of operations for the check service:
---- check sequence diag ----
Check service nominal sequence
A consumer first subscribes for check events before linking some already existing checks to some parameters. The figure shows how check evaluation is normally triggered by either a periodic interval or a change in a monitored value, however, the service also supports the optional ability for consumers to trigger the evaluation of checks using the triggerCheck operation. Finally, if a check event has not been generated for a configurable period of time, known as the maximum reporting interval, an event is generated regardless of whether the check is in violation or not. This maximum reporting interval supports the situation where regular confirmation of the non-violating state of a check is required.
The list of currently violating checks can be obtained using the getCurrentTransitionList operation; to get a full report including non-violating checks the getSummaryReport operation should be used.
The following figure (3-7) shows the flow chart for determining the status of a check:
--- check state diag --- 
Flow Chart for Determining the Status of a Check
Each time a check is evaluated, the procedure indicated in the flow chart depicted in figure 3-7 is performed to calculate the check result. Each check link can have a condition included which determines whether the check should be applied or not; this allows several checks to be associated to a single parameter and applied in different conditions.
The service defines five basic check types, constant, reference, delta, limit, and compound. A constant check is used to ensure that a parameter value either does not change or does not change from a set of specific values.
In the Reference and Delta checks, a value is compared against another value which serves as a reference value. The reference value can be taken from either another parameter or the parameter being checked, and can be the previous value or a value in the past, specified by using a delta time in the ReferenceValue composite. This does not affect the logic of the flow chart above.
Limit checks monitor parameters to see if the parameter value is either inside or outside a range of values.
The final check type, compound, monitors a set of previously defined checks and only violates when a specified number of those monitored checks violate themselves.
The service only publishes check results (as check transition events) when either the result changes from the previous value (for example a check starts to violate), or the maximum reporting interval expires. This reduces the amount of 'no change' reporting data being distributed. For situations where regular reporting of the check result is required, even when no change is detected, a low maximum reporting interval value should be specified."""

from enum import IntEnum
from mo import mal
from mo import com
from mo.mc import *

number = 4

# CapabilitySet 1
class GetCurrentTransitionList(mal.ProgressProviderHandler):
    pass

class GetSummaryReport(mal.ProgressProviderHandler):
    pass


# CapabilitySet 2
class EnableService(mal.SubmitProviderHandler):
    pass

class GetServiceStatus(mal.RequestProviderHandler):
    pass


# CapabilitySet 3
class EnableCheck(mal.SubmitProviderHandler):
    pass


# CapabilitySet 4
class TriggerCheck(mal.SubmitProviderHandler):
    pass


# CapabilitySet 5
class ListDefinition(mal.RequestProviderHandler):
    pass

class ListCheckLinks(mal.RequestProviderHandler):
    pass


# CapabilitySet 6
class AddCheck(mal.RequestProviderHandler):
    pass

class UpdateDefinition(mal.RequestProviderHandler):
    pass

class RemoveCheck(mal.SubmitProviderHandler):
    pass


# CapabilitySet 7
class AddParameterCheck(mal.RequestProviderHandler):
    pass

class RemoveParameterCheck(mal.SubmitProviderHandler):
    pass

class MALShortForm(IntEnum):
    CHECKSTATE = 6
    CHECKLINKDETAILS = 1
    CHECKRESULT = 2
    CHECKLINKSUMMARY = 3
    CHECKRESULTSUMMARY = 4
    CHECKRESULTFILTER = 5
    REFERENCEVALUE = 7
    CONSTANTCHECKDEFINITION = 8
    REFERENCECHECKDEFINITION = 9
    DELTACHECKDEFINITION = 10
    LIMITCHECKDEFINITION = 11
    COMPOUNDCHECKDEFINITION = 12
    CHECKTYPEDINSTANCE = 13


class CheckState(IntEnum):
    """The CheckState enumeration holds the possible basic states of a check. The meaning of the NOT_OK value is check specific and detailed in the relevant check type definition."""

    shortForm = MALShortForm.CHECKSTATE

    DISABLED = 1 # The check is disabled.
    UNCHECKED = 2 # The check is enabled but has not passed the selection condition expression.
    INVALID = 3 # Check is enabled, has passed the selection condition, but the entity being checked is not in a valid state and therefore has not been checked.
    OK = 4 # The check is OK.
    NOT_OK = 5 # The check is not OK.


class CheckDefinitionDetails(mal.Composite):
    """The CheckDefinitionDetails structure holds the definition of a check."""

    shortForm = None

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*7
            self.description = value[0]
            self.checkSeverity = value[1]
            self.maxReportingInterval = value[2]
            self.nominalCount = value[3]
            self.nominalTime = value[4]
            self.violationCount = value[5]
            self.violationTime = value[6]

    @property
    def description(self):
        return self._value[0]

    @description.setter
    def description(self, description):
        self._value[0] = mal.String(description, canBeNull=False, attribName='description')

    @property
    def checkSeverity(self):
        return self._value[1]

    @checkSeverity.setter
    def checkSeverity(self, checkSeverity):
        self._value[1] = Severity(checkSeverity, canBeNull=False, attribName='checkSeverity')

    @property
    def maxReportingInterval(self):
        return self._value[2]

    @maxReportingInterval.setter
    def maxReportingInterval(self, maxReportingInterval):
        self._value[2] = mal.Duration(maxReportingInterval, canBeNull=False, attribName='maxReportingInterval')

    @property
    def nominalCount(self):
        return self._value[3]

    @nominalCount.setter
    def nominalCount(self, nominalCount):
        self._value[3] = mal.UInteger(nominalCount, canBeNull=False, attribName='nominalCount')

    @property
    def nominalTime(self):
        return self._value[4]

    @nominalTime.setter
    def nominalTime(self, nominalTime):
        self._value[4] = mal.Duration(nominalTime, canBeNull=False, attribName='nominalTime')

    @property
    def violationCount(self):
        return self._value[5]

    @violationCount.setter
    def violationCount(self, violationCount):
        self._value[5] = mal.UInteger(violationCount, canBeNull=False, attribName='violationCount')

    @property
    def violationTime(self):
        return self._value[6]

    @violationTime.setter
    def violationTime(self, violationTime):
        self._value[6] = mal.Duration(violationTime, canBeNull=False, attribName='violationTime')


class CheckDefinitionDetailsList(mal.ElementList):
    shortForm = -MALShortForm.CHECKDEFINITIONDETAILS

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(CheckDefinitionDetails(v))


class CheckLinkDetails(mal.Composite):
    """The CheckLinkDetails structure represents the link from a check definition to a check result for a specific parameter."""

    shortForm = MALShortForm.CHECKLINKDETAILS

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*5
            self.checkEnabled = value[0]
            self.checkOnChange = value[1]
            self.useConverted = value[2]
            self.checkInterval = value[3]
            self.condition = value[4]

    @property
    def checkEnabled(self):
        return self._value[0]

    @checkEnabled.setter
    def checkEnabled(self, checkEnabled):
        self._value[0] = mal.Boolean(checkEnabled, canBeNull=False, attribName='checkEnabled')

    @property
    def checkOnChange(self):
        return self._value[1]

    @checkOnChange.setter
    def checkOnChange(self, checkOnChange):
        self._value[1] = mal.Boolean(checkOnChange, canBeNull=False, attribName='checkOnChange')

    @property
    def useConverted(self):
        return self._value[2]

    @useConverted.setter
    def useConverted(self, useConverted):
        self._value[2] = mal.Boolean(useConverted, canBeNull=False, attribName='useConverted')

    @property
    def checkInterval(self):
        return self._value[3]

    @checkInterval.setter
    def checkInterval(self, checkInterval):
        self._value[3] = mal.Duration(checkInterval, canBeNull=False, attribName='checkInterval')

    @property
    def condition(self):
        return self._value[4]

    @condition.setter
    def condition(self, condition):
        self._value[4] = ParameterExpression(condition, canBeNull=True, attribName='condition')


class CheckLinkDetailsList(mal.ElementList):
    shortForm = -MALShortForm.CHECKLINKDETAILS

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(CheckLinkDetails(v))


class CheckResult(mal.Composite):
    """The CheckResult structure holds basic information about the check state and the value of the parameter at the time of the check. The timestamp of the event is the transition time of the check."""

    shortForm = MALShortForm.CHECKRESULT

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*4
            self.previousCheckState = value[0]
            self.currentCheckState = value[1]
            self.paramDefInstId = value[2]
            self.checkedValue = value[3]

    @property
    def previousCheckState(self):
        return self._value[0]

    @previousCheckState.setter
    def previousCheckState(self, previousCheckState):
        self._value[0] = CheckState(previousCheckState, canBeNull=False, attribName='previousCheckState')

    @property
    def currentCheckState(self):
        return self._value[1]

    @currentCheckState.setter
    def currentCheckState(self, currentCheckState):
        self._value[1] = CheckState(currentCheckState, canBeNull=False, attribName='currentCheckState')

    @property
    def paramDefInstId(self):
        return self._value[2]

    @paramDefInstId.setter
    def paramDefInstId(self, paramDefInstId):
        self._value[2] = mal.Long(paramDefInstId, canBeNull=True, attribName='paramDefInstId')

    @property
    def checkedValue(self):
        return self._value[3]

    @checkedValue.setter
    def checkedValue(self, checkedValue):
        self._value[3] = mal.Attribute(checkedValue, canBeNull=True, attribName='checkedValue')


class CheckResultList(mal.ElementList):
    shortForm = -MALShortForm.CHECKRESULT

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(CheckResult(v))


class CheckLinkSummary(mal.Composite):
    """The CheckLinkSummary structure holds the ids of a specific check link and the check and parameter it links to."""

    shortForm = MALShortForm.CHECKLINKSUMMARY

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*5
            self.checkId = value[0]
            self.linkId = value[1]
            self.linkDefinitionId = value[2]
            self.checkEnabled = value[3]
            self.parameterId = value[4]

    @property
    def checkId(self):
        return self._value[0]

    @checkId.setter
    def checkId(self, checkId):
        self._value[0] = mal.Long(checkId, canBeNull=False, attribName='checkId')

    @property
    def linkId(self):
        return self._value[1]

    @linkId.setter
    def linkId(self, linkId):
        self._value[1] = mal.Long(linkId, canBeNull=False, attribName='linkId')

    @property
    def linkDefinitionId(self):
        return self._value[2]

    @linkDefinitionId.setter
    def linkDefinitionId(self, linkDefinitionId):
        self._value[2] = mal.Long(linkDefinitionId, canBeNull=False, attribName='linkDefinitionId')

    @property
    def checkEnabled(self):
        return self._value[3]

    @checkEnabled.setter
    def checkEnabled(self, checkEnabled):
        self._value[3] = mal.Boolean(checkEnabled, canBeNull=False, attribName='checkEnabled')

    @property
    def parameterId(self):
        return self._value[4]

    @parameterId.setter
    def parameterId(self, parameterId):
        self._value[4] = com.ObjectKey(parameterId, canBeNull=True, attribName='parameterId')


class CheckLinkSummaryList(mal.ElementList):
    shortForm = -MALShortForm.CHECKLINKSUMMARY

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(CheckLinkSummary(v))


class CheckResultSummary(mal.Composite):
    """The CheckResultSummary structure holds details about a specific check link and its evaluated result."""

    shortForm = MALShortForm.CHECKRESULTSUMMARY

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*5
            self.linkId = value[0]
            self.checkEnabled = value[1]
            self.parameterId = value[2]
            self.evaluationTime = value[3]
            self.result = value[4]

    @property
    def linkId(self):
        return self._value[0]

    @linkId.setter
    def linkId(self, linkId):
        self._value[0] = mal.Long(linkId, canBeNull=False, attribName='linkId')

    @property
    def checkEnabled(self):
        return self._value[1]

    @checkEnabled.setter
    def checkEnabled(self, checkEnabled):
        self._value[1] = mal.Boolean(checkEnabled, canBeNull=False, attribName='checkEnabled')

    @property
    def parameterId(self):
        return self._value[2]

    @parameterId.setter
    def parameterId(self, parameterId):
        self._value[2] = com.ObjectKey(parameterId, canBeNull=True, attribName='parameterId')

    @property
    def evaluationTime(self):
        return self._value[3]

    @evaluationTime.setter
    def evaluationTime(self, evaluationTime):
        self._value[3] = mal.Time(evaluationTime, canBeNull=False, attribName='evaluationTime')

    @property
    def result(self):
        return self._value[4]

    @result.setter
    def result(self, result):
        self._value[4] = CheckResult(result, canBeNull=False, attribName='result')


class CheckResultSummaryList(mal.ElementList):
    shortForm = -MALShortForm.CHECKRESULTSUMMARY

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(CheckResultSummary(v))


class CheckResultFilter(mal.Composite):
    """The CheckResultFilter structure holds a filter for the current check result transition information."""

    shortForm = MALShortForm.CHECKRESULTFILTER

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*5
            self.checkFilterViaGroups = value[0]
            self.checkFilter = value[1]
            self.parameterFilterViaGroups = value[2]
            self.parameterFilter = value[3]
            self.stateFilter = value[4]

    @property
    def checkFilterViaGroups(self):
        return self._value[0]

    @checkFilterViaGroups.setter
    def checkFilterViaGroups(self, checkFilterViaGroups):
        self._value[0] = mal.Boolean(checkFilterViaGroups, canBeNull=False, attribName='checkFilterViaGroups')

    @property
    def checkFilter(self):
        return self._value[1]

    @checkFilter.setter
    def checkFilter(self, checkFilter):
        self._value[1] = mal.LongList(checkFilter, canBeNull=False, attribName='checkFilter')

    @property
    def parameterFilterViaGroups(self):
        return self._value[2]

    @parameterFilterViaGroups.setter
    def parameterFilterViaGroups(self, parameterFilterViaGroups):
        self._value[2] = mal.Boolean(parameterFilterViaGroups, canBeNull=False, attribName='parameterFilterViaGroups')

    @property
    def parameterFilter(self):
        return self._value[3]

    @parameterFilter.setter
    def parameterFilter(self, parameterFilter):
        self._value[3] = mal.LongList(parameterFilter, canBeNull=False, attribName='parameterFilter')

    @property
    def stateFilter(self):
        return self._value[4]

    @stateFilter.setter
    def stateFilter(self, stateFilter):
        self._value[4] = CheckStateList(stateFilter, canBeNull=False, attribName='stateFilter')


class CheckResultFilterList(mal.ElementList):
    shortForm = -MALShortForm.CHECKRESULTFILTER

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(CheckResultFilter(v))


class ReferenceValue(mal.Composite):
    """The ReferenceValue structure defines a value to compare against. A validCount of '1' and deltaTime of '0' would compare against the previous sample value."""

    shortForm = MALShortForm.REFERENCEVALUE

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*3
            self.validCount = value[0]
            self.deltaTime = value[1]
            self.parameterId = value[2]

    @property
    def validCount(self):
        return self._value[0]

    @validCount.setter
    def validCount(self, validCount):
        self._value[0] = mal.UShort(validCount, canBeNull=False, attribName='validCount')

    @property
    def deltaTime(self):
        return self._value[1]

    @deltaTime.setter
    def deltaTime(self, deltaTime):
        self._value[1] = mal.Duration(deltaTime, canBeNull=False, attribName='deltaTime')

    @property
    def parameterId(self):
        return self._value[2]

    @parameterId.setter
    def parameterId(self, parameterId):
        self._value[2] = com.ObjectKey(parameterId, canBeNull=True, attribName='parameterId')


class ReferenceValueList(mal.ElementList):
    shortForm = -MALShortForm.REFERENCEVALUE

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ReferenceValue(v))


class ConstantCheckDefinition(CheckDefinitionDetails):
    """The ConstantCheckDefinition structure holds the constant values to compare against for a consistency check."""

    shortForm = MALShortForm.CONSTANTCHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*2
            self.operator = value[0]
            self.values = value[1]

    @property
    def operator(self):
        return self._value[0]

    @operator.setter
    def operator(self, operator):
        self._value[0] = com.ExpressionOperator(operator, canBeNull=False, attribName='operator')

    @property
    def values(self):
        return self._value[1]

    @values.setter
    def values(self, values):
        self._value[1] = AttributeValueList(values, canBeNull=False, attribName='values')


class ConstantCheckDefinitionList(mal.ElementList):
    shortForm = -MALShortForm.CONSTANTCHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ConstantCheckDefinition(v))


class ReferenceCheckDefinition(CheckDefinitionDetails):
    """The ReferenceCheckDefinition structure holds the key to another entity to compare against for a consistency check."""

    shortForm = MALShortForm.REFERENCECHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*2
            self.operator = value[0]
            self.checkReference = value[1]

    @property
    def operator(self):
        return self._value[0]

    @operator.setter
    def operator(self, operator):
        self._value[0] = com.ExpressionOperator(operator, canBeNull=False, attribName='operator')

    @property
    def checkReference(self):
        return self._value[1]

    @checkReference.setter
    def checkReference(self, checkReference):
        self._value[1] = ReferenceValue(checkReference, canBeNull=False, attribName='checkReference')


class ReferenceCheckDefinitionList(mal.ElementList):
    shortForm = -MALShortForm.REFERENCECHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ReferenceCheckDefinition(v))


class DeltaCheckDefinition(CheckDefinitionDetails):
    """The DeltaCheckDefinition defines a delta transition check."""

    shortForm = MALShortForm.DELTACHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*5
            self.checkReference = value[0]
            self.violateInRange = value[1]
            self.valueDelta = value[2]
            self.lowerThreshold = value[3]
            self.upperThreshold = value[4]

    @property
    def checkReference(self):
        return self._value[0]

    @checkReference.setter
    def checkReference(self, checkReference):
        self._value[0] = ReferenceValue(checkReference, canBeNull=False, attribName='checkReference')

    @property
    def violateInRange(self):
        return self._value[1]

    @violateInRange.setter
    def violateInRange(self, violateInRange):
        self._value[1] = mal.Boolean(violateInRange, canBeNull=False, attribName='violateInRange')

    @property
    def valueDelta(self):
        return self._value[2]

    @valueDelta.setter
    def valueDelta(self, valueDelta):
        self._value[2] = mal.Boolean(valueDelta, canBeNull=False, attribName='valueDelta')

    @property
    def lowerThreshold(self):
        return self._value[3]

    @lowerThreshold.setter
    def lowerThreshold(self, lowerThreshold):
        self._value[3] = mal.Attribute(lowerThreshold, canBeNull=True, attribName='lowerThreshold')

    @property
    def upperThreshold(self):
        return self._value[4]

    @upperThreshold.setter
    def upperThreshold(self, upperThreshold):
        self._value[4] = mal.Attribute(upperThreshold, canBeNull=True, attribName='upperThreshold')


class DeltaCheckDefinitionList(mal.ElementList):
    shortForm = -MALShortForm.DELTACHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(DeltaCheckDefinition(v))


class LimitCheckDefinition(CheckDefinitionDetails):
    """The LimitCheckDefinition defines a high and low limit check. It is valid to supply only one limit; the other limit is assumed to be the relevant maximum supported by the type being checked in this case."""

    shortForm = MALShortForm.LIMITCHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*3
            self.violateInRange = value[0]
            self.lowerLimit = value[1]
            self.upperLimit = value[2]

    @property
    def violateInRange(self):
        return self._value[0]

    @violateInRange.setter
    def violateInRange(self, violateInRange):
        self._value[0] = mal.Boolean(violateInRange, canBeNull=False, attribName='violateInRange')

    @property
    def lowerLimit(self):
        return self._value[1]

    @lowerLimit.setter
    def lowerLimit(self, lowerLimit):
        self._value[1] = mal.Attribute(lowerLimit, canBeNull=True, attribName='lowerLimit')

    @property
    def upperLimit(self):
        return self._value[2]

    @upperLimit.setter
    def upperLimit(self, upperLimit):
        self._value[2] = mal.Attribute(upperLimit, canBeNull=True, attribName='upperLimit')


class LimitCheckDefinitionList(mal.ElementList):
    shortForm = -MALShortForm.LIMITCHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(LimitCheckDefinition(v))


class CompoundCheckDefinition(CheckDefinitionDetails):
    """The CompoundCheckDefinition structure holds the object instance identifiers of one or more check link objects to monitor for a compound check."""

    shortForm = MALShortForm.COMPOUNDCHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*2
            self.minimumChecksInViolation = value[0]
            self.checkLinkIds = value[1]

    @property
    def minimumChecksInViolation(self):
        return self._value[0]

    @minimumChecksInViolation.setter
    def minimumChecksInViolation(self, minimumChecksInViolation):
        self._value[0] = mal.UInteger(minimumChecksInViolation, canBeNull=False, attribName='minimumChecksInViolation')

    @property
    def checkLinkIds(self):
        return self._value[1]

    @checkLinkIds.setter
    def checkLinkIds(self, checkLinkIds):
        self._value[1] = mal.LongList(checkLinkIds, canBeNull=False, attribName='checkLinkIds')


class CompoundCheckDefinitionList(mal.ElementList):
    shortForm = -MALShortForm.COMPOUNDCHECKDEFINITION

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(CompoundCheckDefinition(v))


class CheckTypedInstance(mal.Composite):
    """The CheckTypedInstance structure is used to hold the two COM object instance identifiers that form the identity and the body of the check definition in combination with the COM object type of the check body definition."""

    shortForm = MALShortForm.CHECKTYPEDINSTANCE

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*2
            self.objDefCheckType = value[0]
            self.objInstIds = value[1]

    @property
    def objDefCheckType(self):
        return self._value[0]

    @objDefCheckType.setter
    def objDefCheckType(self, objDefCheckType):
        self._value[0] = com.ObjectType(objDefCheckType, canBeNull=False, attribName='objDefCheckType')

    @property
    def objInstIds(self):
        return self._value[1]

    @objInstIds.setter
    def objInstIds(self, objInstIds):
        self._value[1] = ObjectInstancePair(objInstIds, canBeNull=True, attribName='objInstIds')


class CheckTypedInstanceList(mal.ElementList):
    shortForm = -MALShortForm.CHECKTYPEDINSTANCE

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(CheckTypedInstance(v))


