#####################################################
# Generated by generators/generator.py              #
# This file is generated. Do NOT edit it by hand.   #
#####################################################

"""The activity tracking service provides the ability to monitor the progress of activities; an activity is anything that has a measurable period of time (a command, a remote procedure, a schedule etc). It defines an event pattern that supports the monitoring of activities from the initial consumer request, tracking its progress across a transport link, to reception by the provider and execution in that provider."""

from enum import IntEnum
from mo import mal
from mo import com

number = 3
class MALShortForm(IntEnum):
    ACTIVITYTRANSFER = 1
    ACTIVITYACCEPTANCE = 2
    ACTIVITYEXECUTION = 3
    OPERATIONACTIVITY = 4


class ActivityTransfer(mal.Composite):
    """The structure holds details for a Release, Reception, or Forward event of an activity."""

    shortForm = MALShortForm.ACTIVITYTRANSFER
    _fieldNumber = mal.Composite._fieldNumber + 3

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value += [None]*3
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self.success = value[mal.Composite._fieldNumber + 0]
            self.estimateDuration = value[mal.Composite._fieldNumber + 1]
            self.nextDestination = value[mal.Composite._fieldNumber + 2]

    @property
    def success(self):
        return self._value[mal.Composite._fieldNumber + 0]

    @success.setter
    def success(self, success):
        self._value[mal.Composite._fieldNumber + 0] = mal.Boolean(success, canBeNull=False, attribName='success')
        self._isNull = False

    @property
    def estimateDuration(self):
        return self._value[mal.Composite._fieldNumber + 1]

    @estimateDuration.setter
    def estimateDuration(self, estimateDuration):
        self._value[mal.Composite._fieldNumber + 1] = mal.Duration(estimateDuration, canBeNull=True, attribName='estimateDuration')
        self._isNull = False

    @property
    def nextDestination(self):
        return self._value[mal.Composite._fieldNumber + 2]

    @nextDestination.setter
    def nextDestination(self, nextDestination):
        self._value[mal.Composite._fieldNumber + 2] = mal.URI(nextDestination, canBeNull=True, attribName='nextDestination')
        self._isNull = False


class ActivityTransferList(mal.ElementList):
    shortForm = -MALShortForm.ACTIVITYTRANSFER

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ActivityTransfer(v))


class ActivityAcceptance(mal.Composite):
    """The structure is used to hold details of an Acceptance event."""

    shortForm = MALShortForm.ACTIVITYACCEPTANCE
    _fieldNumber = mal.Composite._fieldNumber + 1

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value += [None]*1
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self.success = value[mal.Composite._fieldNumber + 0]

    @property
    def success(self):
        return self._value[mal.Composite._fieldNumber + 0]

    @success.setter
    def success(self, success):
        self._value[mal.Composite._fieldNumber + 0] = mal.Boolean(success, canBeNull=False, attribName='success')
        self._isNull = False


class ActivityAcceptanceList(mal.ElementList):
    shortForm = -MALShortForm.ACTIVITYACCEPTANCE

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ActivityAcceptance(v))


class ActivityExecution(mal.Composite):
    """The structure is used to report the execution status of an activity in the final destination."""

    shortForm = MALShortForm.ACTIVITYEXECUTION
    _fieldNumber = mal.Composite._fieldNumber + 3

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value += [None]*3
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self.success = value[mal.Composite._fieldNumber + 0]
            self.executionStage = value[mal.Composite._fieldNumber + 1]
            self.stageCount = value[mal.Composite._fieldNumber + 2]

    @property
    def success(self):
        return self._value[mal.Composite._fieldNumber + 0]

    @success.setter
    def success(self, success):
        self._value[mal.Composite._fieldNumber + 0] = mal.Boolean(success, canBeNull=False, attribName='success')
        self._isNull = False

    @property
    def executionStage(self):
        return self._value[mal.Composite._fieldNumber + 1]

    @executionStage.setter
    def executionStage(self, executionStage):
        self._value[mal.Composite._fieldNumber + 1] = mal.UInteger(executionStage, canBeNull=False, attribName='executionStage')
        self._isNull = False

    @property
    def stageCount(self):
        return self._value[mal.Composite._fieldNumber + 2]

    @stageCount.setter
    def stageCount(self, stageCount):
        self._value[mal.Composite._fieldNumber + 2] = mal.UInteger(stageCount, canBeNull=False, attribName='stageCount')
        self._isNull = False


class ActivityExecutionList(mal.ElementList):
    shortForm = -MALShortForm.ACTIVITYEXECUTION

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ActivityExecution(v))


class OperationActivity(mal.Composite):
    """The OperationActivity structure contains the details of a MAL operation activity."""

    shortForm = MALShortForm.OPERATIONACTIVITY
    _fieldNumber = mal.Composite._fieldNumber + 1

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value += [None]*1
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self.interactionType = value[mal.Composite._fieldNumber + 0]

    @property
    def interactionType(self):
        return self._value[mal.Composite._fieldNumber + 0]

    @interactionType.setter
    def interactionType(self, interactionType):
        self._value[mal.Composite._fieldNumber + 0] = mal.InteractionType(interactionType, canBeNull=False, attribName='interactionType')
        self._isNull = False


class OperationActivityList(mal.ElementList):
    shortForm = -MALShortForm.OPERATIONACTIVITY

    def __init__(self, value=None, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else:
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(OperationActivity(v))


