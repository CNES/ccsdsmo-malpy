from abc import ABC, abstractmethod

from mal.malenums import *

class Element(ABC):
    flag = None

    @abstractmethod
    def __init__(self, value):
        pass

class Attribute(Element):
    value_type = None

    def __init__(self, value):
        if type(value) == type(self):
            self._value = value.value
        elif type(value) == type(self).value_type:
            self._value = value
        else:
            raise TypeError("Expected {}, got {}.".format(type(self).value_type, type(value)))

    @property
    def value(self):
        return self._value

class Composite(Element):
    pass

class Blob(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.BLOB
    value_type = bytes

class Boolean(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.BOOLEAN
    value_type = bool

class Duration(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.DURATION
    value_type = float

class Float(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.FLOAT
    value_type = float

class Double(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.DOUBLE
    value_type = float

class Identifier(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.IDENTIFIER
    value_type = str

class Octet(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.OCTET
    value_type = int

    def __init__(self, value):
        super().__init__(value)
        if type(value) == int and ( value < -128 or value > 127 ):
            raise ValueError("Authorized value is between -128 and 127.")

class Uoctet(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.UOCTET
    value_type = int

    def __init__(self, value):
        super().__init__(value)
        if type(value) == int and ( value < 0 or value > 255 ):
            raise ValueError("Authorized value is between 0 and 255.")

class Short(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.SHORT
    value_type = int

    def __init__(self, value):
        super().__init__(value)
        if type(value) == int and ( value < -32768 or value > 32767 ):
            raise ValueError("Authorized value is between -32768 and 32767.")

class Ushort(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.USHORT
    value_type = int

    def __init__(self, value):
        super().__init__(value)
        if type(value) == int and ( value < 0 or value > 65535 ):
            raise ValueError("Authorized value is between 0 and 65535.")

class Integer(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.INTEGER
    value_type = int

    def __init__(self, value):
        super().__init__(value)
        if type(value) == int and ( value < -2147483648 or value > 2147483647 ):
            raise ValueError("Authorized value is between -2147483648 and 2147483647.")

class Uinteger(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.UINTEGER
    value_type = int

    def __init__(self, value):
        super().__init__(value)
        if type(value) == int and ( value < 0 or value > 4294967295 ):
            raise ValueError("Authorized value is between 0 and 4294967295.")

class Long(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.LONG
    value_type = int

    def __init__(self, value):
        super().__init__(value)
        if type(value) == int and ( value < -9223372036854775808 or value > 9223372036854775807 ):
            raise ValueError("Authorized value is between -9223372036854775808 and 9223372036854775807.")

class Ulong(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.ULONG
    value_type = int

    def __init__(self, value):
        super().__init__(value)
        if type(value) == int and ( value < 0 or value > 18446744073709551615 ):
            raise ValueError("Authorized value is between 0 and 18446744073709551615.")

class String(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.STRING
    value_type = str

class Time(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.TIME
    value_type = float

class Finetime(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.FINETIME
    value_type = float

class Uri(Attribute):
    flag = MAL_ATTRIBUTE_FLAGS.URI
    value_type = str

class Subscription(Composite):
    flag = 23

    def __init__(self, value):
        if type(value) == type(self):
            self.subscriptionId = value.subscriptionId
            self.entities = value.entities
            return
        elif if type(value) != type(self).value_type:
            raise TypeError("Expected {}, got {}.".format(type(self).value_type, type(value)))
        self._value = value

    @property
    def value(self):
        return self._value

    @property
    def subscriptionId(self):
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, subscriptionId):
        self._value[0] = Identifier(subscriptionId)

    @property
    def entities(self):
        return self._value[0]

    @entities.setter
    def entities(self, entitities):
        self._value[1] = [EntityRequest(x) for x in entities]
