#! /bin/python

#####################################################
# Generated by generators/generator.py              #
# This file is generated. Do NOT edit it by hand.   #
#####################################################

from enum import IntEnum
from .. import maltypes as MAL

name = "COM"
number = 2
version = 1

class MALShortForm(IntEnum):
    OBJECTTYPE = 1
    OBJECTKEY = 2
    OBJECTID = 3
    OBJECTDETAILS = 4
    INSTANCEBOOLEANPAIR = 5

class Errors(IntEnum):
    """All MAL errors."""

    INVALID = 70000 # Operation specific
    DUPLICATE = 70001 # Operation specific


class ObjectType(MAL.Composite):
    """The ObjectType structure uniquely identifies the type of an object. It is the combination of the area number, service number, area version, and service object type number. The combined parts are able to fit inside a MAL::Long (for implementations that prefer to index on a single numeric field rather than a structure)."""

    shortForm = MALShortForm.OBJECTTYPE

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*4
            self.area = value[0]
            self.service = value[1]
            self.version = value[2]
            self.number = value[3]

    @property
    def area(self):
        return self._value[0]

    @area.setter
    def area(self, area):
        self._value[0] = MAL.UShort(area, canBeNull=False, attribName='area')

    @property
    def service(self):
        return self._value[1]

    @service.setter
    def service(self, service):
        self._value[1] = MAL.UShort(service, canBeNull=False, attribName='service')

    @property
    def version(self):
        return self._value[2]

    @version.setter
    def version(self, version):
        self._value[2] = MAL.UOctet(version, canBeNull=False, attribName='version')

    @property
    def number(self):
        return self._value[3]

    @number.setter
    def number(self, number):
        self._value[3] = MAL.UShort(number, canBeNull=False, attribName='number')


class ObjectTypeList(MAL.ElementList):
    shortForm = -MALShortForm.OBJECTTYPE

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ObjectType(v))


class ObjectKey(MAL.Composite):
    """The ObjectKey structure combines a domain and an object instance identifier such that it identifies the instance of an object for a specific domain."""

    shortForm = MALShortForm.OBJECTKEY

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*2
            self.domain = value[0]
            self.instId = value[1]

    @property
    def domain(self):
        return self._value[0]

    @domain.setter
    def domain(self, domain):
        self._value[0] = MAL.IdentifierList(domain, canBeNull=False, attribName='domain')

    @property
    def instId(self):
        return self._value[1]

    @instId.setter
    def instId(self, instId):
        self._value[1] = MAL.Long(instId, canBeNull=False, attribName='instId')


class ObjectKeyList(MAL.ElementList):
    shortForm = -MALShortForm.OBJECTKEY

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ObjectKey(v))


class ObjectId(MAL.Composite):
    """The ObjectId structure combines an object type and an object key such that it identifies the instance and type of an object for a specific domain."""

    shortForm = MALShortForm.OBJECTID

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*2
            self.type = value[0]
            self.key = value[1]

    @property
    def type(self):
        return self._value[0]

    @type.setter
    def type(self, type):
        self._value[0] = ObjectType(type, canBeNull=False, attribName='type')

    @property
    def key(self):
        return self._value[1]

    @key.setter
    def key(self, key):
        self._value[1] = ObjectKey(key, canBeNull=False, attribName='key')


class ObjectIdList(MAL.ElementList):
    shortForm = -MALShortForm.OBJECTID

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ObjectId(v))


class ObjectDetails(MAL.Composite):
    """The ObjectDetails type is used to hold the extra information associated with an object instance, namely the related and source links."""

    shortForm = MALShortForm.OBJECTDETAILS

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*2
            self.related = value[0]
            self.source = value[1]

    @property
    def related(self):
        return self._value[0]

    @related.setter
    def related(self, related):
        self._value[0] = MAL.Long(related, canBeNull=True, attribName='related')

    @property
    def source(self):
        return self._value[1]

    @source.setter
    def source(self, source):
        self._value[1] = ObjectId(source, canBeNull=True, attribName='source')


class ObjectDetailsList(MAL.ElementList):
    shortForm = -MALShortForm.OBJECTDETAILS

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(ObjectDetails(v))


class InstanceBooleanPair(MAL.Composite):
    """Simple pair of an object instance identifier and a Boolean value."""

    shortForm = MALShortForm.INSTANCEBOOLEANPAIR

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        if value is None and self._canBeNull:
            self._isNull = True
        elif type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            self._value = [None]*2
            self.id = value[0]
            self.value = value[1]

    @property
    def id(self):
        return self._value[0]

    @id.setter
    def id(self, id):
        self._value[0] = MAL.Long(id, canBeNull=False, attribName='id')

    @property
    def value(self):
        return self._value[1]

    @value.setter
    def value(self, value):
        self._value[1] = MAL.Boolean(value, canBeNull=False, attribName='value')


class InstanceBooleanPairList(MAL.ElementList):
    shortForm = -MALShortForm.INSTANCEBOOLEANPAIR

    def __init__(self, value, canBeNull=True, attribName=None):
        super().__init__(value, canBeNull, attribName)
        self._value = []
        if type(value) == type(self):
            if value.value is None:
                if self._canBeNull:
                    self._isNull = True
                else: 
                    raise ValueError("This {} cannot be Null".format(type(self)))
            else:
                self._value = value.copy().value
        else:
            listvalue = value if type(value) == list else [value]
            for v in listvalue:
                 self._value.append(InstanceBooleanPair(v))


